// Code generated by protoc-gen-go.
// source: project.proto
// DO NOT EDIT!

/*
Package com_cst14_im_protobuf is a generated protocol buffer package.

It is generated from these files:
	project.proto

It has these top-level messages:
	Msg
	User
	Attrtype
	FriendList
	UserDetail
	UserCustomAttr
	SearchInfo
	Group
	MsgForFileUpload
	PersonalMsg
	GroupMemberInfo
	GroupInfo
	GroupAnnounce
	GroupMsg
	GroupHistoryMsg
	FeedBack
	FileInfo
	MsgSecurity
	MsgEmail
	MsgQuestion
	MsgPhone
	Nearby
	Location
	PersonalMsgReadingRecord
	NearbyCondition
	NearbySetting
*/
package com_cst14_im_protobuf

import proto "github.com/golang/protobuf/proto"
import fmt "fmt"
import math "math"

// Reference imports to suppress errors if they are not otherwise used.
var _ = proto.Marshal
var _ = fmt.Errorf
var _ = math.Inf

// This is a compile-time assertion to ensure that this generated file
// is compatible with the proto package it is being compiled against.
// A compilation error at this line likely means your copy of the
// proto package needs to be updated.
const _ = proto.ProtoPackageIsVersion2 // please upgrade the proto package

type MsgType int32

const (
	MsgType_LOGIN                       MsgType = 0
	MsgType_BAN_LOGIN                   MsgType = 1
	MsgType_REGISTER                    MsgType = 2
	MsgType_GET_OFFLINE_MSG             MsgType = 3
	MsgType_GET_ATTR                    MsgType = 4
	MsgType_DET_CUSTOMATTR              MsgType = 5
	MsgType_SAVE_ATTR                   MsgType = 6
	MsgType_GET_PWD_QUETION             MsgType = 7
	MsgType_CHANGE_PASSWORD             MsgType = 8
	MsgType_SELECT_USER_ROLE            MsgType = 9
	MsgType_MODIFY_ROLE                 MsgType = 10
	MsgType_SET_PWD_QUETION             MsgType = 11
	MsgType_VERIFY_PWD_QUETION          MsgType = 12
	MsgType_CHANGE_PASSWORD_BY_QUETIONS MsgType = 13
	MsgType_VIEW_HISTOTY_MSG            MsgType = 21
	MsgType_GET_FRIEND                  MsgType = 22
	MsgType_DET_FRIEND                  MsgType = 24
	MsgType_Remark_Friend               MsgType = 25
	MsgType_ADD_Friend_GROUP            MsgType = 26
	MsgType_DET_Friend_GROUP            MsgType = 27
	MsgType_Remark_Friend_GROUP         MsgType = 28
	MsgType_ADD_FRIEND_Rquest           MsgType = 29
	MsgType_ADD_FRIEND_Response         MsgType = 30
	MsgType_SEEK_AROUD                  MsgType = 36
	MsgType_SEEK_CONDITION              MsgType = 37
	MsgType_SEEK_ATTRB                  MsgType = 38
	MsgType_SEEK_NAME                   MsgType = 39
	MsgType_SEEK_GROUP                  MsgType = 41
	MsgType_GROUP_CHAT                  MsgType = 53
	MsgType_SEE_GROUP_MSG_READ_STATUS   MsgType = 54
	MsgType_GET_GROUP_FILE              MsgType = 55
	MsgType_MSG_FEED_BACK               MsgType = 56
	MsgType_GET_ALL_GROUP_JOINED        MsgType = 57
	MsgType_GET_GROUP_PUBLIC_INFO       MsgType = 58
	MsgType_GET_GROUP_PERSONAL_INFO     MsgType = 59
	MsgType_GET_GROUP_MSG               MsgType = 70
	MsgType_CREATE_GROUP                MsgType = 60
	MsgType_SEARCH_GROUP                MsgType = 61
	MsgType_JOIN_GROUP                  MsgType = 62
	MsgType_DEL_GROUP                   MsgType = 63
	MsgType_EXIT_GROUP                  MsgType = 64
	MsgType_DEL_GROUP_MEMBER            MsgType = 65
	MsgType_INVITE_MEMBER_TO_JOIN_GROUP MsgType = 120
	MsgType_EDIT_GROUP_INFO             MsgType = 121
	MsgType_EDIT_GROUP_NAMECARD         MsgType = 122
	MsgType_SET_GROUP_ADMIN             MsgType = 123
	MsgType_REMOVE_GROUP_ADMIN          MsgType = 124
	MsgType_TRANSFER_GROUP              MsgType = 125
	MsgType_SEND_FILE                   MsgType = 71
	MsgType_ASK_FILE                    MsgType = 72
	MsgType_CREATE_ANNOUNCE             MsgType = 74
	MsgType_EDIT_ANNOUNCE               MsgType = 75
	MsgType_GET_ANNOUNCE                MsgType = 76
	MsgType_DEL_ANNOUNCE                MsgType = 77
	MsgType_IS_HAVE_NEW_ANNOUNCE        MsgType = 78
	// -----The operator of Security-----
	MsgType_BIND_EMAIL               MsgType = 80
	MsgType_REMOVE_EMAIL             MsgType = 81
	MsgType_SET_QUESTION             MsgType = 82
	MsgType_CANCEL_QUESTION          MsgType = 83
	MsgType_GET_SECURITY_INFO        MsgType = 84
	MsgType_BIND_PHONE               MsgType = 85
	MsgType_CANCEL_PHONE             MsgType = 86
	MsgType_CHANGE_PWD_BY_ORIGIN_PWD MsgType = 87
	MsgType_CHANGE_PWD_BY_EMAIL      MsgType = 88
	MsgType_LOGIN_PWD_BY_PHONE       MsgType = 89
	// ---- relative dataType of chat
	MsgType_MsgType_SESSION                 MsgType = 93
	MsgType_MsgType_UPLOAD_FILE             MsgType = 94
	MsgType_UPDATE_LOCATION                 MsgType = 99
	MsgType_GET_NEARBY                      MsgType = 100
	MsgType_GET_NEARBY_BY_PAGE              MsgType = 101
	MsgType_GET_NEARBY_TIP                  MsgType = 102
	MsgType_GET_FRIEND_MSG                  MsgType = 104
	MsgType_GET_NEARBY_SETTING              MsgType = 103
	MsgType_UPDATE_NEARBY_SETTING           MsgType = 106
	MsgType_GET_PERSONAL_MSG_READING_RECORD MsgType = 105
	// ----Permissions' message
	MsgType_GET_CURRENT_PERMISSION_TYPE MsgType = 110
	MsgType_CHECK_RGST_TYPE             MsgType = 111
	MsgType_SET_RGST_TYPE               MsgType = 112
	MsgType_CHECK_IF_LOGIN              MsgType = 113
	MsgType_SET_LOGIN_TYPE              MsgType = 114
	MsgType_CHECK_USER_REQUIRED         MsgType = 115
	MsgType_SET_USER_REQUIRED           MsgType = 116
	MsgType_CHECK_CREATE_GROUP_LIMIT    MsgType = 117
	MsgType_SET_CREATE_GROUP_LIMIT      MsgType = 118
	MsgType_GET_ATTR_TYPE               MsgType = 119
	// -----管理员修改指定用户信息-----
	MsgType_GET_USER_DETAIL   MsgType = 126
	MsgType_MODIFY_USER_INFOR MsgType = 127
)

var MsgType_name = map[int32]string{
	0:   "LOGIN",
	1:   "BAN_LOGIN",
	2:   "REGISTER",
	3:   "GET_OFFLINE_MSG",
	4:   "GET_ATTR",
	5:   "DET_CUSTOMATTR",
	6:   "SAVE_ATTR",
	7:   "GET_PWD_QUETION",
	8:   "CHANGE_PASSWORD",
	9:   "SELECT_USER_ROLE",
	10:  "MODIFY_ROLE",
	11:  "SET_PWD_QUETION",
	12:  "VERIFY_PWD_QUETION",
	13:  "CHANGE_PASSWORD_BY_QUETIONS",
	21:  "VIEW_HISTOTY_MSG",
	22:  "GET_FRIEND",
	24:  "DET_FRIEND",
	25:  "Remark_Friend",
	26:  "ADD_Friend_GROUP",
	27:  "DET_Friend_GROUP",
	28:  "Remark_Friend_GROUP",
	29:  "ADD_FRIEND_Rquest",
	30:  "ADD_FRIEND_Response",
	36:  "SEEK_AROUD",
	37:  "SEEK_CONDITION",
	38:  "SEEK_ATTRB",
	39:  "SEEK_NAME",
	41:  "SEEK_GROUP",
	53:  "GROUP_CHAT",
	54:  "SEE_GROUP_MSG_READ_STATUS",
	55:  "GET_GROUP_FILE",
	56:  "MSG_FEED_BACK",
	57:  "GET_ALL_GROUP_JOINED",
	58:  "GET_GROUP_PUBLIC_INFO",
	59:  "GET_GROUP_PERSONAL_INFO",
	70:  "GET_GROUP_MSG",
	60:  "CREATE_GROUP",
	61:  "SEARCH_GROUP",
	62:  "JOIN_GROUP",
	63:  "DEL_GROUP",
	64:  "EXIT_GROUP",
	65:  "DEL_GROUP_MEMBER",
	120: "INVITE_MEMBER_TO_JOIN_GROUP",
	121: "EDIT_GROUP_INFO",
	122: "EDIT_GROUP_NAMECARD",
	123: "SET_GROUP_ADMIN",
	124: "REMOVE_GROUP_ADMIN",
	125: "TRANSFER_GROUP",
	71:  "SEND_FILE",
	72:  "ASK_FILE",
	74:  "CREATE_ANNOUNCE",
	75:  "EDIT_ANNOUNCE",
	76:  "GET_ANNOUNCE",
	77:  "DEL_ANNOUNCE",
	78:  "IS_HAVE_NEW_ANNOUNCE",
	80:  "BIND_EMAIL",
	81:  "REMOVE_EMAIL",
	82:  "SET_QUESTION",
	83:  "CANCEL_QUESTION",
	84:  "GET_SECURITY_INFO",
	85:  "BIND_PHONE",
	86:  "CANCEL_PHONE",
	87:  "CHANGE_PWD_BY_ORIGIN_PWD",
	88:  "CHANGE_PWD_BY_EMAIL",
	89:  "LOGIN_PWD_BY_PHONE",
	93:  "MsgType_SESSION",
	94:  "MsgType_UPLOAD_FILE",
	99:  "UPDATE_LOCATION",
	100: "GET_NEARBY",
	101: "GET_NEARBY_BY_PAGE",
	102: "GET_NEARBY_TIP",
	104: "GET_FRIEND_MSG",
	103: "GET_NEARBY_SETTING",
	106: "UPDATE_NEARBY_SETTING",
	105: "GET_PERSONAL_MSG_READING_RECORD",
	110: "GET_CURRENT_PERMISSION_TYPE",
	111: "CHECK_RGST_TYPE",
	112: "SET_RGST_TYPE",
	113: "CHECK_IF_LOGIN",
	114: "SET_LOGIN_TYPE",
	115: "CHECK_USER_REQUIRED",
	116: "SET_USER_REQUIRED",
	117: "CHECK_CREATE_GROUP_LIMIT",
	118: "SET_CREATE_GROUP_LIMIT",
	119: "GET_ATTR_TYPE",
	126: "GET_USER_DETAIL",
	127: "MODIFY_USER_INFOR",
}
var MsgType_value = map[string]int32{
	"LOGIN":                           0,
	"BAN_LOGIN":                       1,
	"REGISTER":                        2,
	"GET_OFFLINE_MSG":                 3,
	"GET_ATTR":                        4,
	"DET_CUSTOMATTR":                  5,
	"SAVE_ATTR":                       6,
	"GET_PWD_QUETION":                 7,
	"CHANGE_PASSWORD":                 8,
	"SELECT_USER_ROLE":                9,
	"MODIFY_ROLE":                     10,
	"SET_PWD_QUETION":                 11,
	"VERIFY_PWD_QUETION":              12,
	"CHANGE_PASSWORD_BY_QUETIONS":     13,
	"VIEW_HISTOTY_MSG":                21,
	"GET_FRIEND":                      22,
	"DET_FRIEND":                      24,
	"Remark_Friend":                   25,
	"ADD_Friend_GROUP":                26,
	"DET_Friend_GROUP":                27,
	"Remark_Friend_GROUP":             28,
	"ADD_FRIEND_Rquest":               29,
	"ADD_FRIEND_Response":             30,
	"SEEK_AROUD":                      36,
	"SEEK_CONDITION":                  37,
	"SEEK_ATTRB":                      38,
	"SEEK_NAME":                       39,
	"SEEK_GROUP":                      41,
	"GROUP_CHAT":                      53,
	"SEE_GROUP_MSG_READ_STATUS":       54,
	"GET_GROUP_FILE":                  55,
	"MSG_FEED_BACK":                   56,
	"GET_ALL_GROUP_JOINED":            57,
	"GET_GROUP_PUBLIC_INFO":           58,
	"GET_GROUP_PERSONAL_INFO":         59,
	"GET_GROUP_MSG":                   70,
	"CREATE_GROUP":                    60,
	"SEARCH_GROUP":                    61,
	"JOIN_GROUP":                      62,
	"DEL_GROUP":                       63,
	"EXIT_GROUP":                      64,
	"DEL_GROUP_MEMBER":                65,
	"INVITE_MEMBER_TO_JOIN_GROUP":     120,
	"EDIT_GROUP_INFO":                 121,
	"EDIT_GROUP_NAMECARD":             122,
	"SET_GROUP_ADMIN":                 123,
	"REMOVE_GROUP_ADMIN":              124,
	"TRANSFER_GROUP":                  125,
	"SEND_FILE":                       71,
	"ASK_FILE":                        72,
	"CREATE_ANNOUNCE":                 74,
	"EDIT_ANNOUNCE":                   75,
	"GET_ANNOUNCE":                    76,
	"DEL_ANNOUNCE":                    77,
	"IS_HAVE_NEW_ANNOUNCE":            78,
	"BIND_EMAIL":                      80,
	"REMOVE_EMAIL":                    81,
	"SET_QUESTION":                    82,
	"CANCEL_QUESTION":                 83,
	"GET_SECURITY_INFO":               84,
	"BIND_PHONE":                      85,
	"CANCEL_PHONE":                    86,
	"CHANGE_PWD_BY_ORIGIN_PWD":        87,
	"CHANGE_PWD_BY_EMAIL":             88,
	"LOGIN_PWD_BY_PHONE":              89,
	"MsgType_SESSION":                 93,
	"MsgType_UPLOAD_FILE":             94,
	"UPDATE_LOCATION":                 99,
	"GET_NEARBY":                      100,
	"GET_NEARBY_BY_PAGE":              101,
	"GET_NEARBY_TIP":                  102,
	"GET_FRIEND_MSG":                  104,
	"GET_NEARBY_SETTING":              103,
	"UPDATE_NEARBY_SETTING":           106,
	"GET_PERSONAL_MSG_READING_RECORD": 105,
	"GET_CURRENT_PERMISSION_TYPE":     110,
	"CHECK_RGST_TYPE":                 111,
	"SET_RGST_TYPE":                   112,
	"CHECK_IF_LOGIN":                  113,
	"SET_LOGIN_TYPE":                  114,
	"CHECK_USER_REQUIRED":             115,
	"SET_USER_REQUIRED":               116,
	"CHECK_CREATE_GROUP_LIMIT":        117,
	"SET_CREATE_GROUP_LIMIT":          118,
	"GET_ATTR_TYPE":                   119,
	"GET_USER_DETAIL":                 126,
	"MODIFY_USER_INFOR":               127,
}

func (x MsgType) Enum() *MsgType {
	p := new(MsgType)
	*p = x
	return p
}
func (x MsgType) String() string {
	return proto.EnumName(MsgType_name, int32(x))
}
func (x *MsgType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MsgType_value, data, "MsgType")
	if err != nil {
		return err
	}
	*x = MsgType(value)
	return nil
}
func (MsgType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

type StatusCode int32

const (
	StatusCode_SUCCESS StatusCode = 0
	StatusCode_FAILED  StatusCode = 1
)

var StatusCode_name = map[int32]string{
	0: "SUCCESS",
	1: "FAILED",
}
var StatusCode_value = map[string]int32{
	"SUCCESS": 0,
	"FAILED":  1,
}

func (x StatusCode) Enum() *StatusCode {
	p := new(StatusCode)
	*p = x
	return p
}
func (x StatusCode) String() string {
	return proto.EnumName(StatusCode_name, int32(x))
}
func (x *StatusCode) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(StatusCode_value, data, "StatusCode")
	if err != nil {
		return err
	}
	*x = StatusCode(value)
	return nil
}
func (StatusCode) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

type UserRole int32

const (
	UserRole_SupAdmin     UserRole = 1
	UserRole_Admin        UserRole = 2
	UserRole_CustmrSrv    UserRole = 3
	UserRole_OrdinaryUser UserRole = 4
)

var UserRole_name = map[int32]string{
	1: "SupAdmin",
	2: "Admin",
	3: "CustmrSrv",
	4: "OrdinaryUser",
}
var UserRole_value = map[string]int32{
	"SupAdmin":     1,
	"Admin":        2,
	"CustmrSrv":    3,
	"OrdinaryUser": 4,
}

func (x UserRole) Enum() *UserRole {
	p := new(UserRole)
	*p = x
	return p
}
func (x UserRole) String() string {
	return proto.EnumName(UserRole_name, int32(x))
}
func (x *UserRole) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(UserRole_value, data, "UserRole")
	if err != nil {
		return err
	}
	*x = UserRole(value)
	return nil
}
func (UserRole) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

type MsgStatus int32

const (
	MsgStatus_SEND_FAIL    MsgStatus = 0
	MsgStatus_SEND_SUCCESS MsgStatus = 2
	MsgStatus_READED       MsgStatus = 4
)

var MsgStatus_name = map[int32]string{
	0: "SEND_FAIL",
	2: "SEND_SUCCESS",
	4: "READED",
}
var MsgStatus_value = map[string]int32{
	"SEND_FAIL":    0,
	"SEND_SUCCESS": 2,
	"READED":       4,
}

func (x MsgStatus) Enum() *MsgStatus {
	p := new(MsgStatus)
	*p = x
	return p
}
func (x MsgStatus) String() string {
	return proto.EnumName(MsgStatus_name, int32(x))
}
func (x *MsgStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(MsgStatus_value, data, "MsgStatus")
	if err != nil {
		return err
	}
	*x = MsgStatus(value)
	return nil
}
func (MsgStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

type DataType int32

const (
	DataType_TEXT                 DataType = 0
	DataType_IMAGE                DataType = 1
	DataType_VIDEO                DataType = 2
	DataType_VOICE                DataType = 3
	DataType_FILE                 DataType = 5
	DataType_FEED_BACK_SEND_OK    DataType = 6
	DataType_FEED_BACK_RECEIVED   DataType = 7
	DataType_FEED_BACK_ONE_READED DataType = 8
)

var DataType_name = map[int32]string{
	0: "TEXT",
	1: "IMAGE",
	2: "VIDEO",
	3: "VOICE",
	5: "FILE",
	6: "FEED_BACK_SEND_OK",
	7: "FEED_BACK_RECEIVED",
	8: "FEED_BACK_ONE_READED",
}
var DataType_value = map[string]int32{
	"TEXT":                 0,
	"IMAGE":                1,
	"VIDEO":                2,
	"VOICE":                3,
	"FILE":                 5,
	"FEED_BACK_SEND_OK":    6,
	"FEED_BACK_RECEIVED":   7,
	"FEED_BACK_ONE_READED": 8,
}

func (x DataType) Enum() *DataType {
	p := new(DataType)
	*p = x
	return p
}
func (x DataType) String() string {
	return proto.EnumName(DataType_name, int32(x))
}
func (x *DataType) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(DataType_value, data, "DataType")
	if err != nil {
		return err
	}
	*x = DataType(value)
	return nil
}
func (DataType) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

type EmailStauts int32

const (
	EmailStauts_UNBOUND    EmailStauts = 0
	EmailStauts_BOUND      EmailStauts = 1
	EmailStauts_REUSED     EmailStauts = 2
	EmailStauts_UNVERIFIED EmailStauts = 3
)

var EmailStauts_name = map[int32]string{
	0: "UNBOUND",
	1: "BOUND",
	2: "REUSED",
	3: "UNVERIFIED",
}
var EmailStauts_value = map[string]int32{
	"UNBOUND":    0,
	"BOUND":      1,
	"REUSED":     2,
	"UNVERIFIED": 3,
}

func (x EmailStauts) Enum() *EmailStauts {
	p := new(EmailStauts)
	*p = x
	return p
}
func (x EmailStauts) String() string {
	return proto.EnumName(EmailStauts_name, int32(x))
}
func (x *EmailStauts) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(EmailStauts_value, data, "EmailStauts")
	if err != nil {
		return err
	}
	*x = EmailStauts(value)
	return nil
}
func (EmailStauts) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

type QuestionStatus int32

const (
	QuestionStatus_UNSET QuestionStatus = 0
	QuestionStatus_SET   QuestionStatus = 1
)

var QuestionStatus_name = map[int32]string{
	0: "UNSET",
	1: "SET",
}
var QuestionStatus_value = map[string]int32{
	"UNSET": 0,
	"SET":   1,
}

func (x QuestionStatus) Enum() *QuestionStatus {
	p := new(QuestionStatus)
	*p = x
	return p
}
func (x QuestionStatus) String() string {
	return proto.EnumName(QuestionStatus_name, int32(x))
}
func (x *QuestionStatus) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(QuestionStatus_value, data, "QuestionStatus")
	if err != nil {
		return err
	}
	*x = QuestionStatus(value)
	return nil
}
func (QuestionStatus) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

type Sex int32

const (
	Sex_ALL   Sex = 0
	Sex_MAN   Sex = 1
	Sex_WOMAN Sex = 2
)

var Sex_name = map[int32]string{
	0: "ALL",
	1: "MAN",
	2: "WOMAN",
}
var Sex_value = map[string]int32{
	"ALL":   0,
	"MAN":   1,
	"WOMAN": 2,
}

func (x Sex) Enum() *Sex {
	p := new(Sex)
	*p = x
	return p
}
func (x Sex) String() string {
	return proto.EnumName(Sex_name, int32(x))
}
func (x *Sex) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Sex_value, data, "Sex")
	if err != nil {
		return err
	}
	*x = Sex(value)
	return nil
}
func (Sex) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

type Active int32

const (
	Active_ONE_DAY         Active = 0
	Active_THREE_DAYS      Active = 1
	Active_FIFTEEN_MINUTES Active = 2
	Active_SIXTY_MINUTES   Active = 3
)

var Active_name = map[int32]string{
	0: "ONE_DAY",
	1: "THREE_DAYS",
	2: "FIFTEEN_MINUTES",
	3: "SIXTY_MINUTES",
}
var Active_value = map[string]int32{
	"ONE_DAY":         0,
	"THREE_DAYS":      1,
	"FIFTEEN_MINUTES": 2,
	"SIXTY_MINUTES":   3,
}

func (x Active) Enum() *Active {
	p := new(Active)
	*p = x
	return p
}
func (x Active) String() string {
	return proto.EnumName(Active_name, int32(x))
}
func (x *Active) UnmarshalJSON(data []byte) error {
	value, err := proto.UnmarshalJSONEnum(Active_value, data, "Active")
	if err != nil {
		return err
	}
	*x = Active(value)
	return nil
}
func (Active) EnumDescriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

type Msg struct {
	MsgType          *MsgType                  `protobuf:"varint,1,req,name=msgType,enum=com.cst14.im.protobuf.MsgType" json:"msgType,omitempty"`
	MsgUniqueTag     *string                   `protobuf:"bytes,2,opt,name=msgUniqueTag" json:"msgUniqueTag,omitempty"`
	ResponseState    *StatusCode               `protobuf:"varint,3,opt,name=responseState,enum=com.cst14.im.protobuf.StatusCode" json:"responseState,omitempty"`
	Account          *string                   `protobuf:"bytes,4,opt,name=account" json:"account,omitempty"`
	Pwd              *string                   `protobuf:"bytes,5,opt,name=pwd" json:"pwd,omitempty"`
	Token            *string                   `protobuf:"bytes,6,opt,name=token" json:"token,omitempty"`
	ErrMsg           *string                   `protobuf:"bytes,7,opt,name=errMsg" json:"errMsg,omitempty"`
	User             *User                     `protobuf:"bytes,8,opt,name=user" json:"user,omitempty"`
	Friends          []*User                   `protobuf:"bytes,9,rep,name=friends" json:"friends,omitempty"`
	FriendLists      []*FriendList             `protobuf:"bytes,10,rep,name=friendLists" json:"friendLists,omitempty"`
	OfflineMsg       []*PersonalMsg            `protobuf:"bytes,11,rep,name=OfflineMsg,json=offlineMsg" json:"OfflineMsg,omitempty"`
	OfflineGroupMsg  []*GroupMsg               `protobuf:"bytes,12,rep,name=OfflineGroupMsg,json=offlineGroupMsg" json:"OfflineGroupMsg,omitempty"`
	Groups           []*Group                  `protobuf:"bytes,13,rep,name=groups" json:"groups,omitempty"`
	SrchInfo         *SearchInfo               `protobuf:"bytes,14,opt,name=srchInfo" json:"srchInfo,omitempty"`
	NewFriendRequest []*User                   `protobuf:"bytes,15,rep,name=newFriendRequest" json:"newFriendRequest,omitempty"`
	IMEI             *string                   `protobuf:"bytes,21,opt,name=IMEI,json=iMEI" json:"IMEI,omitempty"`
	Strkey           *string                   `protobuf:"bytes,30,opt,name=strkey" json:"strkey,omitempty"`
	GroupID          *int32                    `protobuf:"varint,31,opt,name=groupID" json:"groupID,omitempty"`
	Path             *string                   `protobuf:"bytes,35,opt,name=path" json:"path,omitempty"`
	MsgTime          *string                   `protobuf:"bytes,36,opt,name=msgTime" json:"msgTime,omitempty"`
	GroupName        *string                   `protobuf:"bytes,37,opt,name=groupName" json:"groupName,omitempty"`
	FeedBack         *FeedBack                 `protobuf:"bytes,38,opt,name=feedBack" json:"feedBack,omitempty"`
	PersonMsg        []*PersonalMsg            `protobuf:"bytes,83,rep,name=personMsg" json:"personMsg,omitempty"`
	GroupMsg         *GroupMsg                 `protobuf:"bytes,41,opt,name=groupMsg" json:"groupMsg,omitempty"`
	GroupInfo        []*GroupInfo              `protobuf:"bytes,43,rep,name=groupInfo" json:"groupInfo,omitempty"`
	Announce         []*GroupAnnounce          `protobuf:"bytes,40,rep,name=announce" json:"announce,omitempty"`
	MsgIndex         *int32                    `protobuf:"varint,44,opt,name=msgIndex" json:"msgIndex,omitempty"`
	FriendID         *int32                    `protobuf:"varint,45,opt,name=friendID" json:"friendID,omitempty"`
	SecurityItem     *MsgSecurity              `protobuf:"bytes,80,opt,name=securityItem" json:"securityItem,omitempty"`
	PersonalMsg      *PersonalMsg              `protobuf:"bytes,81,opt,name=personalMsg" json:"personalMsg,omitempty"`
	FileUploadMsg    *MsgForFileUpload         `protobuf:"bytes,82,opt,name=fileUploadMsg" json:"fileUploadMsg,omitempty"`
	NearBy           []*Nearby                 `protobuf:"bytes,90,rep,name=nearBy" json:"nearBy,omitempty"`
	Location         *Location                 `protobuf:"bytes,91,opt,name=location" json:"location,omitempty"`
	Record           *PersonalMsgReadingRecord `protobuf:"bytes,92,opt,name=record" json:"record,omitempty"`
	NearbyCondition  *NearbyCondition          `protobuf:"bytes,93,opt,name=nearbyCondition" json:"nearbyCondition,omitempty"`
	CurNearbyPage    *int32                    `protobuf:"varint,94,opt,name=curNearbyPage" json:"curNearbyPage,omitempty"`
	NearbySetting    *NearbySetting            `protobuf:"bytes,96,opt,name=nearbySetting" json:"nearbySetting,omitempty"`
	RgstType         *int32                    `protobuf:"varint,100,opt,name=rgstType" json:"rgstType,omitempty"`
	IfLogin          *bool                     `protobuf:"varint,101,opt,name=ifLogin" json:"ifLogin,omitempty"`
	AttrType         *Attrtype                 `protobuf:"bytes,102,opt,name=attrType" json:"attrType,omitempty"`
	UserMark         *string                   `protobuf:"bytes,103,opt,name=userMark" json:"userMark,omitempty"`
	IsUserExists     *bool                     `protobuf:"varint,104,opt,name=isUserExists" json:"isUserExists,omitempty"`
	GroupHistoryMsg  []*GroupMsg               `protobuf:"bytes,105,rep,name=groupHistoryMsg" json:"groupHistoryMsg,omitempty"`
	IsPerMsg         *bool                     `protobuf:"varint,106,opt,name=isPerMsg" json:"isPerMsg,omitempty"`
	XXX_unrecognized []byte                    `json:"-"`
}

func (m *Msg) Reset()                    { *m = Msg{} }
func (m *Msg) String() string            { return proto.CompactTextString(m) }
func (*Msg) ProtoMessage()               {}
func (*Msg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{0} }

func (m *Msg) GetMsgType() MsgType {
	if m != nil && m.MsgType != nil {
		return *m.MsgType
	}
	return MsgType_LOGIN
}

func (m *Msg) GetMsgUniqueTag() string {
	if m != nil && m.MsgUniqueTag != nil {
		return *m.MsgUniqueTag
	}
	return ""
}

func (m *Msg) GetResponseState() StatusCode {
	if m != nil && m.ResponseState != nil {
		return *m.ResponseState
	}
	return StatusCode_SUCCESS
}

func (m *Msg) GetAccount() string {
	if m != nil && m.Account != nil {
		return *m.Account
	}
	return ""
}

func (m *Msg) GetPwd() string {
	if m != nil && m.Pwd != nil {
		return *m.Pwd
	}
	return ""
}

func (m *Msg) GetToken() string {
	if m != nil && m.Token != nil {
		return *m.Token
	}
	return ""
}

func (m *Msg) GetErrMsg() string {
	if m != nil && m.ErrMsg != nil {
		return *m.ErrMsg
	}
	return ""
}

func (m *Msg) GetUser() *User {
	if m != nil {
		return m.User
	}
	return nil
}

func (m *Msg) GetFriends() []*User {
	if m != nil {
		return m.Friends
	}
	return nil
}

func (m *Msg) GetFriendLists() []*FriendList {
	if m != nil {
		return m.FriendLists
	}
	return nil
}

func (m *Msg) GetOfflineMsg() []*PersonalMsg {
	if m != nil {
		return m.OfflineMsg
	}
	return nil
}

func (m *Msg) GetOfflineGroupMsg() []*GroupMsg {
	if m != nil {
		return m.OfflineGroupMsg
	}
	return nil
}

func (m *Msg) GetGroups() []*Group {
	if m != nil {
		return m.Groups
	}
	return nil
}

func (m *Msg) GetSrchInfo() *SearchInfo {
	if m != nil {
		return m.SrchInfo
	}
	return nil
}

func (m *Msg) GetNewFriendRequest() []*User {
	if m != nil {
		return m.NewFriendRequest
	}
	return nil
}

func (m *Msg) GetIMEI() string {
	if m != nil && m.IMEI != nil {
		return *m.IMEI
	}
	return ""
}

func (m *Msg) GetStrkey() string {
	if m != nil && m.Strkey != nil {
		return *m.Strkey
	}
	return ""
}

func (m *Msg) GetGroupID() int32 {
	if m != nil && m.GroupID != nil {
		return *m.GroupID
	}
	return 0
}

func (m *Msg) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *Msg) GetMsgTime() string {
	if m != nil && m.MsgTime != nil {
		return *m.MsgTime
	}
	return ""
}

func (m *Msg) GetGroupName() string {
	if m != nil && m.GroupName != nil {
		return *m.GroupName
	}
	return ""
}

func (m *Msg) GetFeedBack() *FeedBack {
	if m != nil {
		return m.FeedBack
	}
	return nil
}

func (m *Msg) GetPersonMsg() []*PersonalMsg {
	if m != nil {
		return m.PersonMsg
	}
	return nil
}

func (m *Msg) GetGroupMsg() *GroupMsg {
	if m != nil {
		return m.GroupMsg
	}
	return nil
}

func (m *Msg) GetGroupInfo() []*GroupInfo {
	if m != nil {
		return m.GroupInfo
	}
	return nil
}

func (m *Msg) GetAnnounce() []*GroupAnnounce {
	if m != nil {
		return m.Announce
	}
	return nil
}

func (m *Msg) GetMsgIndex() int32 {
	if m != nil && m.MsgIndex != nil {
		return *m.MsgIndex
	}
	return 0
}

func (m *Msg) GetFriendID() int32 {
	if m != nil && m.FriendID != nil {
		return *m.FriendID
	}
	return 0
}

func (m *Msg) GetSecurityItem() *MsgSecurity {
	if m != nil {
		return m.SecurityItem
	}
	return nil
}

func (m *Msg) GetPersonalMsg() *PersonalMsg {
	if m != nil {
		return m.PersonalMsg
	}
	return nil
}

func (m *Msg) GetFileUploadMsg() *MsgForFileUpload {
	if m != nil {
		return m.FileUploadMsg
	}
	return nil
}

func (m *Msg) GetNearBy() []*Nearby {
	if m != nil {
		return m.NearBy
	}
	return nil
}

func (m *Msg) GetLocation() *Location {
	if m != nil {
		return m.Location
	}
	return nil
}

func (m *Msg) GetRecord() *PersonalMsgReadingRecord {
	if m != nil {
		return m.Record
	}
	return nil
}

func (m *Msg) GetNearbyCondition() *NearbyCondition {
	if m != nil {
		return m.NearbyCondition
	}
	return nil
}

func (m *Msg) GetCurNearbyPage() int32 {
	if m != nil && m.CurNearbyPage != nil {
		return *m.CurNearbyPage
	}
	return 0
}

func (m *Msg) GetNearbySetting() *NearbySetting {
	if m != nil {
		return m.NearbySetting
	}
	return nil
}

func (m *Msg) GetRgstType() int32 {
	if m != nil && m.RgstType != nil {
		return *m.RgstType
	}
	return 0
}

func (m *Msg) GetIfLogin() bool {
	if m != nil && m.IfLogin != nil {
		return *m.IfLogin
	}
	return false
}

func (m *Msg) GetAttrType() *Attrtype {
	if m != nil {
		return m.AttrType
	}
	return nil
}

func (m *Msg) GetUserMark() string {
	if m != nil && m.UserMark != nil {
		return *m.UserMark
	}
	return ""
}

func (m *Msg) GetIsUserExists() bool {
	if m != nil && m.IsUserExists != nil {
		return *m.IsUserExists
	}
	return false
}

func (m *Msg) GetGroupHistoryMsg() []*GroupMsg {
	if m != nil {
		return m.GroupHistoryMsg
	}
	return nil
}

func (m *Msg) GetIsPerMsg() bool {
	if m != nil && m.IsPerMsg != nil {
		return *m.IsPerMsg
	}
	return false
}

type User struct {
	UserID           *int32      `protobuf:"varint,1,req,name=userID" json:"userID,omitempty"`
	UserPwd          *string     `protobuf:"bytes,2,opt,name=userPwd" json:"userPwd,omitempty"`
	NickName         *string     `protobuf:"bytes,3,opt,name=nickName" json:"nickName,omitempty"`
	Icon             []byte      `protobuf:"bytes,4,opt,name=icon" json:"icon,omitempty"`
	IconName         *string     `protobuf:"bytes,5,opt,name=iconName" json:"iconName,omitempty"`
	IsOnline         *bool       `protobuf:"varint,6,opt,name=isOnline" json:"isOnline,omitempty"`
	UesrIntro        *string     `protobuf:"bytes,7,opt,name=uesrIntro" json:"uesrIntro,omitempty"`
	UserRoleID       *int32      `protobuf:"varint,8,opt,name=userRoleID" json:"userRoleID,omitempty"`
	Remark           *string     `protobuf:"bytes,9,opt,name=remark" json:"remark,omitempty"`
	UserDetail       *UserDetail `protobuf:"bytes,10,opt,name=userDetail" json:"userDetail,omitempty"`
	UserName         *string     `protobuf:"bytes,11,opt,name=userName" json:"userName,omitempty"`
	ListNO           *int32      `protobuf:"varint,12,opt,name=listNO" json:"listNO,omitempty"`
	IsAgree          *bool       `protobuf:"varint,13,opt,name=isAgree" json:"isAgree,omitempty"`
	CreGroupLimit    *int32      `protobuf:"varint,14,opt,name=creGroupLimit" json:"creGroupLimit,omitempty"`
	XXX_unrecognized []byte      `json:"-"`
}

func (m *User) Reset()                    { *m = User{} }
func (m *User) String() string            { return proto.CompactTextString(m) }
func (*User) ProtoMessage()               {}
func (*User) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{1} }

func (m *User) GetUserID() int32 {
	if m != nil && m.UserID != nil {
		return *m.UserID
	}
	return 0
}

func (m *User) GetUserPwd() string {
	if m != nil && m.UserPwd != nil {
		return *m.UserPwd
	}
	return ""
}

func (m *User) GetNickName() string {
	if m != nil && m.NickName != nil {
		return *m.NickName
	}
	return ""
}

func (m *User) GetIcon() []byte {
	if m != nil {
		return m.Icon
	}
	return nil
}

func (m *User) GetIconName() string {
	if m != nil && m.IconName != nil {
		return *m.IconName
	}
	return ""
}

func (m *User) GetIsOnline() bool {
	if m != nil && m.IsOnline != nil {
		return *m.IsOnline
	}
	return false
}

func (m *User) GetUesrIntro() string {
	if m != nil && m.UesrIntro != nil {
		return *m.UesrIntro
	}
	return ""
}

func (m *User) GetUserRoleID() int32 {
	if m != nil && m.UserRoleID != nil {
		return *m.UserRoleID
	}
	return 0
}

func (m *User) GetRemark() string {
	if m != nil && m.Remark != nil {
		return *m.Remark
	}
	return ""
}

func (m *User) GetUserDetail() *UserDetail {
	if m != nil {
		return m.UserDetail
	}
	return nil
}

func (m *User) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *User) GetListNO() int32 {
	if m != nil && m.ListNO != nil {
		return *m.ListNO
	}
	return 0
}

func (m *User) GetIsAgree() bool {
	if m != nil && m.IsAgree != nil {
		return *m.IsAgree
	}
	return false
}

func (m *User) GetCreGroupLimit() int32 {
	if m != nil && m.CreGroupLimit != nil {
		return *m.CreGroupLimit
	}
	return 0
}

type Attrtype struct {
	Nick             *bool  `protobuf:"varint,1,opt,name=nick" json:"nick,omitempty"`
	Phone            *bool  `protobuf:"varint,2,opt,name=phone" json:"phone,omitempty"`
	RealPhoto        *bool  `protobuf:"varint,3,opt,name=realPhoto" json:"realPhoto,omitempty"`
	Address          *bool  `protobuf:"varint,4,opt,name=address" json:"address,omitempty"`
	Sex              *bool  `protobuf:"varint,5,opt,name=sex" json:"sex,omitempty"`
	Age              *bool  `protobuf:"varint,6,opt,name=age" json:"age,omitempty"`
	Birthday         *bool  `protobuf:"varint,7,opt,name=birthday" json:"birthday,omitempty"`
	Mail             *bool  `protobuf:"varint,8,opt,name=mail" json:"mail,omitempty"`
	Qq               *bool  `protobuf:"varint,9,opt,name=qq" json:"qq,omitempty"`
	Wechat           *bool  `protobuf:"varint,10,opt,name=wechat" json:"wechat,omitempty"`
	IdCard           *bool  `protobuf:"varint,11,opt,name=idCard" json:"idCard,omitempty"`
	CreCard          *bool  `protobuf:"varint,12,opt,name=creCard" json:"creCard,omitempty"`
	DebtCard         *bool  `protobuf:"varint,13,opt,name=debtCard" json:"debtCard,omitempty"`
	StuNo            *bool  `protobuf:"varint,14,opt,name=stuNo" json:"stuNo,omitempty"`
	XXX_unrecognized []byte `json:"-"`
}

func (m *Attrtype) Reset()                    { *m = Attrtype{} }
func (m *Attrtype) String() string            { return proto.CompactTextString(m) }
func (*Attrtype) ProtoMessage()               {}
func (*Attrtype) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{2} }

func (m *Attrtype) GetNick() bool {
	if m != nil && m.Nick != nil {
		return *m.Nick
	}
	return false
}

func (m *Attrtype) GetPhone() bool {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return false
}

func (m *Attrtype) GetRealPhoto() bool {
	if m != nil && m.RealPhoto != nil {
		return *m.RealPhoto
	}
	return false
}

func (m *Attrtype) GetAddress() bool {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return false
}

func (m *Attrtype) GetSex() bool {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return false
}

func (m *Attrtype) GetAge() bool {
	if m != nil && m.Age != nil {
		return *m.Age
	}
	return false
}

func (m *Attrtype) GetBirthday() bool {
	if m != nil && m.Birthday != nil {
		return *m.Birthday
	}
	return false
}

func (m *Attrtype) GetMail() bool {
	if m != nil && m.Mail != nil {
		return *m.Mail
	}
	return false
}

func (m *Attrtype) GetQq() bool {
	if m != nil && m.Qq != nil {
		return *m.Qq
	}
	return false
}

func (m *Attrtype) GetWechat() bool {
	if m != nil && m.Wechat != nil {
		return *m.Wechat
	}
	return false
}

func (m *Attrtype) GetIdCard() bool {
	if m != nil && m.IdCard != nil {
		return *m.IdCard
	}
	return false
}

func (m *Attrtype) GetCreCard() bool {
	if m != nil && m.CreCard != nil {
		return *m.CreCard
	}
	return false
}

func (m *Attrtype) GetDebtCard() bool {
	if m != nil && m.DebtCard != nil {
		return *m.DebtCard
	}
	return false
}

func (m *Attrtype) GetStuNo() bool {
	if m != nil && m.StuNo != nil {
		return *m.StuNo
	}
	return false
}

type FriendList struct {
	ListNO           *int32  `protobuf:"varint,1,req,name=listNO" json:"listNO,omitempty"`
	ListName         *string `protobuf:"bytes,2,opt,name=listName" json:"listName,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FriendList) Reset()                    { *m = FriendList{} }
func (m *FriendList) String() string            { return proto.CompactTextString(m) }
func (*FriendList) ProtoMessage()               {}
func (*FriendList) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{3} }

func (m *FriendList) GetListNO() int32 {
	if m != nil && m.ListNO != nil {
		return *m.ListNO
	}
	return 0
}

func (m *FriendList) GetListName() string {
	if m != nil && m.ListName != nil {
		return *m.ListName
	}
	return ""
}

type UserDetail struct {
	UID              *int32          `protobuf:"varint,1,req,name=uID" json:"uID,omitempty"`
	Phone            *string         `protobuf:"bytes,2,opt,name=phone" json:"phone,omitempty"`
	Address          *string         `protobuf:"bytes,3,opt,name=address" json:"address,omitempty"`
	QQ               *string         `protobuf:"bytes,4,opt,name=QQ,json=qQ" json:"QQ,omitempty"`
	Wechat           *string         `protobuf:"bytes,5,opt,name=wechat" json:"wechat,omitempty"`
	Sex              *string         `protobuf:"bytes,6,opt,name=sex" json:"sex,omitempty"`
	Age              *int32          `protobuf:"varint,7,opt,name=age" json:"age,omitempty"`
	IdCard           *string         `protobuf:"bytes,8,opt,name=idCard" json:"idCard,omitempty"`
	Mail             *string         `protobuf:"bytes,9,opt,name=mail" json:"mail,omitempty"`
	CreCard          *string         `protobuf:"bytes,10,opt,name=creCard" json:"creCard,omitempty"`
	DebtCard         *string         `protobuf:"bytes,11,opt,name=debtCard" json:"debtCard,omitempty"`
	StdNo            *string         `protobuf:"bytes,12,opt,name=stdNo" json:"stdNo,omitempty"`
	Intro            *string         `protobuf:"bytes,13,opt,name=intro" json:"intro,omitempty"`
	CustomAttr       *UserCustomAttr `protobuf:"bytes,14,opt,name=customAttr" json:"customAttr,omitempty"`
	Birthday         *string         `protobuf:"bytes,15,opt,name=birthday" json:"birthday,omitempty"`
	XXX_unrecognized []byte          `json:"-"`
}

func (m *UserDetail) Reset()                    { *m = UserDetail{} }
func (m *UserDetail) String() string            { return proto.CompactTextString(m) }
func (*UserDetail) ProtoMessage()               {}
func (*UserDetail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{4} }

func (m *UserDetail) GetUID() int32 {
	if m != nil && m.UID != nil {
		return *m.UID
	}
	return 0
}

func (m *UserDetail) GetPhone() string {
	if m != nil && m.Phone != nil {
		return *m.Phone
	}
	return ""
}

func (m *UserDetail) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *UserDetail) GetQQ() string {
	if m != nil && m.QQ != nil {
		return *m.QQ
	}
	return ""
}

func (m *UserDetail) GetWechat() string {
	if m != nil && m.Wechat != nil {
		return *m.Wechat
	}
	return ""
}

func (m *UserDetail) GetSex() string {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return ""
}

func (m *UserDetail) GetAge() int32 {
	if m != nil && m.Age != nil {
		return *m.Age
	}
	return 0
}

func (m *UserDetail) GetIdCard() string {
	if m != nil && m.IdCard != nil {
		return *m.IdCard
	}
	return ""
}

func (m *UserDetail) GetMail() string {
	if m != nil && m.Mail != nil {
		return *m.Mail
	}
	return ""
}

func (m *UserDetail) GetCreCard() string {
	if m != nil && m.CreCard != nil {
		return *m.CreCard
	}
	return ""
}

func (m *UserDetail) GetDebtCard() string {
	if m != nil && m.DebtCard != nil {
		return *m.DebtCard
	}
	return ""
}

func (m *UserDetail) GetStdNo() string {
	if m != nil && m.StdNo != nil {
		return *m.StdNo
	}
	return ""
}

func (m *UserDetail) GetIntro() string {
	if m != nil && m.Intro != nil {
		return *m.Intro
	}
	return ""
}

func (m *UserDetail) GetCustomAttr() *UserCustomAttr {
	if m != nil {
		return m.CustomAttr
	}
	return nil
}

func (m *UserDetail) GetBirthday() string {
	if m != nil && m.Birthday != nil {
		return *m.Birthday
	}
	return ""
}

type UserCustomAttr struct {
	UserID           *int32   `protobuf:"varint,1,req,name=userID" json:"userID,omitempty"`
	AttrName         []string `protobuf:"bytes,2,rep,name=attrName" json:"attrName,omitempty"`
	AttrContent      []string `protobuf:"bytes,3,rep,name=attrContent" json:"attrContent,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *UserCustomAttr) Reset()                    { *m = UserCustomAttr{} }
func (m *UserCustomAttr) String() string            { return proto.CompactTextString(m) }
func (*UserCustomAttr) ProtoMessage()               {}
func (*UserCustomAttr) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{5} }

func (m *UserCustomAttr) GetUserID() int32 {
	if m != nil && m.UserID != nil {
		return *m.UserID
	}
	return 0
}

func (m *UserCustomAttr) GetAttrName() []string {
	if m != nil {
		return m.AttrName
	}
	return nil
}

func (m *UserCustomAttr) GetAttrContent() []string {
	if m != nil {
		return m.AttrContent
	}
	return nil
}

type SearchInfo struct {
	SearchType       *MsgType `protobuf:"varint,1,req,name=searchType,enum=com.cst14.im.protobuf.MsgType" json:"searchType,omitempty"`
	SrchName         *string  `protobuf:"bytes,2,opt,name=srchName" json:"srchName,omitempty"`
	SrchAttrb        *string  `protobuf:"bytes,3,opt,name=srchAttrb" json:"srchAttrb,omitempty"`
	OnlyOnline       *bool    `protobuf:"varint,4,opt,name=onlyOnline" json:"onlyOnline,omitempty"`
	AgeLow           *int32   `protobuf:"varint,5,opt,name=ageLow" json:"ageLow,omitempty"`
	AgeHigh          *int32   `protobuf:"varint,6,opt,name=ageHigh" json:"ageHigh,omitempty"`
	SelectMale       *bool    `protobuf:"varint,7,opt,name=selectMale" json:"selectMale,omitempty"`
	SelectFemale     *bool    `protobuf:"varint,8,opt,name=selectFemale" json:"selectFemale,omitempty"`
	GroupNO          *int32   `protobuf:"varint,9,opt,name=groupNO" json:"groupNO,omitempty"`
	Address          *string  `protobuf:"bytes,10,opt,name=address" json:"address,omitempty"`
	SinceId          *int32   `protobuf:"varint,11,opt,name=sinceId" json:"sinceId,omitempty"`
	Lng              *float64 `protobuf:"fixed64,12,opt,name=lng" json:"lng,omitempty"`
	Lat              *float64 `protobuf:"fixed64,13,opt,name=lat" json:"lat,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *SearchInfo) Reset()                    { *m = SearchInfo{} }
func (m *SearchInfo) String() string            { return proto.CompactTextString(m) }
func (*SearchInfo) ProtoMessage()               {}
func (*SearchInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{6} }

func (m *SearchInfo) GetSearchType() MsgType {
	if m != nil && m.SearchType != nil {
		return *m.SearchType
	}
	return MsgType_LOGIN
}

func (m *SearchInfo) GetSrchName() string {
	if m != nil && m.SrchName != nil {
		return *m.SrchName
	}
	return ""
}

func (m *SearchInfo) GetSrchAttrb() string {
	if m != nil && m.SrchAttrb != nil {
		return *m.SrchAttrb
	}
	return ""
}

func (m *SearchInfo) GetOnlyOnline() bool {
	if m != nil && m.OnlyOnline != nil {
		return *m.OnlyOnline
	}
	return false
}

func (m *SearchInfo) GetAgeLow() int32 {
	if m != nil && m.AgeLow != nil {
		return *m.AgeLow
	}
	return 0
}

func (m *SearchInfo) GetAgeHigh() int32 {
	if m != nil && m.AgeHigh != nil {
		return *m.AgeHigh
	}
	return 0
}

func (m *SearchInfo) GetSelectMale() bool {
	if m != nil && m.SelectMale != nil {
		return *m.SelectMale
	}
	return false
}

func (m *SearchInfo) GetSelectFemale() bool {
	if m != nil && m.SelectFemale != nil {
		return *m.SelectFemale
	}
	return false
}

func (m *SearchInfo) GetGroupNO() int32 {
	if m != nil && m.GroupNO != nil {
		return *m.GroupNO
	}
	return 0
}

func (m *SearchInfo) GetAddress() string {
	if m != nil && m.Address != nil {
		return *m.Address
	}
	return ""
}

func (m *SearchInfo) GetSinceId() int32 {
	if m != nil && m.SinceId != nil {
		return *m.SinceId
	}
	return 0
}

func (m *SearchInfo) GetLng() float64 {
	if m != nil && m.Lng != nil {
		return *m.Lng
	}
	return 0
}

func (m *SearchInfo) GetLat() float64 {
	if m != nil && m.Lat != nil {
		return *m.Lat
	}
	return 0
}

type Group struct {
	GroupID          *int32  `protobuf:"varint,1,req,name=groupID" json:"groupID,omitempty"`
	GroupName        *string `protobuf:"bytes,2,opt,name=groupName" json:"groupName,omitempty"`
	GroupIntro       *string `protobuf:"bytes,3,opt,name=groupIntro" json:"groupIntro,omitempty"`
	CreateTime       *string `protobuf:"bytes,4,opt,name=createTime" json:"createTime,omitempty"`
	Rank             *int32  `protobuf:"varint,5,opt,name=rank" json:"rank,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *Group) Reset()                    { *m = Group{} }
func (m *Group) String() string            { return proto.CompactTextString(m) }
func (*Group) ProtoMessage()               {}
func (*Group) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{7} }

func (m *Group) GetGroupID() int32 {
	if m != nil && m.GroupID != nil {
		return *m.GroupID
	}
	return 0
}

func (m *Group) GetGroupName() string {
	if m != nil && m.GroupName != nil {
		return *m.GroupName
	}
	return ""
}

func (m *Group) GetGroupIntro() string {
	if m != nil && m.GroupIntro != nil {
		return *m.GroupIntro
	}
	return ""
}

func (m *Group) GetCreateTime() string {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return ""
}

func (m *Group) GetRank() int32 {
	if m != nil && m.Rank != nil {
		return *m.Rank
	}
	return 0
}

type MsgForFileUpload struct {
	FileFingerPrint   []string `protobuf:"bytes,1,rep,name=fileFingerPrint" json:"fileFingerPrint,omitempty"`
	FileTokenForHttp  []string `protobuf:"bytes,2,rep,name=fileTokenForHttp" json:"fileTokenForHttp,omitempty"`
	ShouldAvoidUpload []bool   `protobuf:"varint,3,rep,name=shouldAvoidUpload" json:"shouldAvoidUpload,omitempty"`
	XXX_unrecognized  []byte   `json:"-"`
}

func (m *MsgForFileUpload) Reset()                    { *m = MsgForFileUpload{} }
func (m *MsgForFileUpload) String() string            { return proto.CompactTextString(m) }
func (*MsgForFileUpload) ProtoMessage()               {}
func (*MsgForFileUpload) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{8} }

func (m *MsgForFileUpload) GetFileFingerPrint() []string {
	if m != nil {
		return m.FileFingerPrint
	}
	return nil
}

func (m *MsgForFileUpload) GetFileTokenForHttp() []string {
	if m != nil {
		return m.FileTokenForHttp
	}
	return nil
}

func (m *MsgForFileUpload) GetShouldAvoidUpload() []bool {
	if m != nil {
		return m.ShouldAvoidUpload
	}
	return nil
}

type PersonalMsg struct {
	SenderID         *int32    `protobuf:"varint,1,req,name=senderID" json:"senderID,omitempty"`
	RecverID         []int32   `protobuf:"varint,2,rep,name=recverID" json:"recverID,omitempty"`
	SendTime         *string   `protobuf:"bytes,3,opt,name=sendTime" json:"sendTime,omitempty"`
	ReadTime         *string   `protobuf:"bytes,4,opt,name=readTime" json:"readTime,omitempty"`
	Content          *string   `protobuf:"bytes,5,opt,name=content" json:"content,omitempty"`
	MsgType          *DataType `protobuf:"varint,6,opt,name=msgType,enum=com.cst14.im.protobuf.DataType" json:"msgType,omitempty"`
	IsReaded         *bool     `protobuf:"varint,7,opt,name=isReaded" json:"isReaded,omitempty"`
	FileName         *string   `protobuf:"bytes,8,opt,name=fileName" json:"fileName,omitempty"`
	ThumbFingerPrint *string   `protobuf:"bytes,13,opt,name=thumbFingerPrint" json:"thumbFingerPrint,omitempty"`
	ThumbName        *string   `protobuf:"bytes,14,opt,name=thumbName" json:"thumbName,omitempty"`
	FileLen          *string   `protobuf:"bytes,15,opt,name=fileLen" json:"fileLen,omitempty"`
	MsgId            *string   `protobuf:"bytes,16,opt,name=msgId" json:"msgId,omitempty"`
	RecvID           *int32    `protobuf:"varint,17,opt,name=recvID" json:"recvID,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *PersonalMsg) Reset()                    { *m = PersonalMsg{} }
func (m *PersonalMsg) String() string            { return proto.CompactTextString(m) }
func (*PersonalMsg) ProtoMessage()               {}
func (*PersonalMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{9} }

func (m *PersonalMsg) GetSenderID() int32 {
	if m != nil && m.SenderID != nil {
		return *m.SenderID
	}
	return 0
}

func (m *PersonalMsg) GetRecverID() []int32 {
	if m != nil {
		return m.RecverID
	}
	return nil
}

func (m *PersonalMsg) GetSendTime() string {
	if m != nil && m.SendTime != nil {
		return *m.SendTime
	}
	return ""
}

func (m *PersonalMsg) GetReadTime() string {
	if m != nil && m.ReadTime != nil {
		return *m.ReadTime
	}
	return ""
}

func (m *PersonalMsg) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *PersonalMsg) GetMsgType() DataType {
	if m != nil && m.MsgType != nil {
		return *m.MsgType
	}
	return DataType_TEXT
}

func (m *PersonalMsg) GetIsReaded() bool {
	if m != nil && m.IsReaded != nil {
		return *m.IsReaded
	}
	return false
}

func (m *PersonalMsg) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

func (m *PersonalMsg) GetThumbFingerPrint() string {
	if m != nil && m.ThumbFingerPrint != nil {
		return *m.ThumbFingerPrint
	}
	return ""
}

func (m *PersonalMsg) GetThumbName() string {
	if m != nil && m.ThumbName != nil {
		return *m.ThumbName
	}
	return ""
}

func (m *PersonalMsg) GetFileLen() string {
	if m != nil && m.FileLen != nil {
		return *m.FileLen
	}
	return ""
}

func (m *PersonalMsg) GetMsgId() string {
	if m != nil && m.MsgId != nil {
		return *m.MsgId
	}
	return ""
}

func (m *PersonalMsg) GetRecvID() int32 {
	if m != nil && m.RecvID != nil {
		return *m.RecvID
	}
	return 0
}

type GroupMemberInfo struct {
	UserID           *int32  `protobuf:"varint,1,opt,name=userID" json:"userID,omitempty"`
	UserName         *string `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`
	Namecard         *string `protobuf:"bytes,3,opt,name=namecard" json:"namecard,omitempty"`
	Role             *int32  `protobuf:"varint,4,opt,name=role" json:"role,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GroupMemberInfo) Reset()                    { *m = GroupMemberInfo{} }
func (m *GroupMemberInfo) String() string            { return proto.CompactTextString(m) }
func (*GroupMemberInfo) ProtoMessage()               {}
func (*GroupMemberInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{10} }

func (m *GroupMemberInfo) GetUserID() int32 {
	if m != nil && m.UserID != nil {
		return *m.UserID
	}
	return 0
}

func (m *GroupMemberInfo) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *GroupMemberInfo) GetNamecard() string {
	if m != nil && m.Namecard != nil {
		return *m.Namecard
	}
	return ""
}

func (m *GroupMemberInfo) GetRole() int32 {
	if m != nil && m.Role != nil {
		return *m.Role
	}
	return 0
}

type GroupInfo struct {
	GroupID          *int32             `protobuf:"varint,1,opt,name=groupID" json:"groupID,omitempty"`
	GroupName        *string            `protobuf:"bytes,2,opt,name=groupName" json:"groupName,omitempty"`
	OwnerID          *int32             `protobuf:"varint,3,opt,name=ownerID" json:"ownerID,omitempty"`
	OwnerName        *string            `protobuf:"bytes,4,opt,name=ownerName" json:"ownerName,omitempty"`
	CreateTime       *string            `protobuf:"bytes,5,opt,name=createTime" json:"createTime,omitempty"`
	GroupIntro       *string            `protobuf:"bytes,6,opt,name=groupIntro" json:"groupIntro,omitempty"`
	Icon             []byte             `protobuf:"bytes,7,opt,name=icon" json:"icon,omitempty"`
	IconName         *string            `protobuf:"bytes,8,opt,name=iconName" json:"iconName,omitempty"`
	MbList           *string            `protobuf:"bytes,9,opt,name=mbList" json:"mbList,omitempty"`
	MbCount          *int32             `protobuf:"varint,10,opt,name=mbCount" json:"mbCount,omitempty"`
	Admin            *string            `protobuf:"bytes,11,opt,name=admin" json:"admin,omitempty"`
	Namecard         *string            `protobuf:"bytes,12,opt,name=namecard" json:"namecard,omitempty"`
	UserRole         *int32             `protobuf:"varint,13,opt,name=userRole" json:"userRole,omitempty"`
	MyInfo           *GroupMemberInfo   `protobuf:"bytes,14,opt,name=myInfo" json:"myInfo,omitempty"`
	MemberList       []*GroupMemberInfo `protobuf:"bytes,15,rep,name=memberList" json:"memberList,omitempty"`
	XXX_unrecognized []byte             `json:"-"`
}

func (m *GroupInfo) Reset()                    { *m = GroupInfo{} }
func (m *GroupInfo) String() string            { return proto.CompactTextString(m) }
func (*GroupInfo) ProtoMessage()               {}
func (*GroupInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{11} }

func (m *GroupInfo) GetGroupID() int32 {
	if m != nil && m.GroupID != nil {
		return *m.GroupID
	}
	return 0
}

func (m *GroupInfo) GetGroupName() string {
	if m != nil && m.GroupName != nil {
		return *m.GroupName
	}
	return ""
}

func (m *GroupInfo) GetOwnerID() int32 {
	if m != nil && m.OwnerID != nil {
		return *m.OwnerID
	}
	return 0
}

func (m *GroupInfo) GetOwnerName() string {
	if m != nil && m.OwnerName != nil {
		return *m.OwnerName
	}
	return ""
}

func (m *GroupInfo) GetCreateTime() string {
	if m != nil && m.CreateTime != nil {
		return *m.CreateTime
	}
	return ""
}

func (m *GroupInfo) GetGroupIntro() string {
	if m != nil && m.GroupIntro != nil {
		return *m.GroupIntro
	}
	return ""
}

func (m *GroupInfo) GetIcon() []byte {
	if m != nil {
		return m.Icon
	}
	return nil
}

func (m *GroupInfo) GetIconName() string {
	if m != nil && m.IconName != nil {
		return *m.IconName
	}
	return ""
}

func (m *GroupInfo) GetMbList() string {
	if m != nil && m.MbList != nil {
		return *m.MbList
	}
	return ""
}

func (m *GroupInfo) GetMbCount() int32 {
	if m != nil && m.MbCount != nil {
		return *m.MbCount
	}
	return 0
}

func (m *GroupInfo) GetAdmin() string {
	if m != nil && m.Admin != nil {
		return *m.Admin
	}
	return ""
}

func (m *GroupInfo) GetNamecard() string {
	if m != nil && m.Namecard != nil {
		return *m.Namecard
	}
	return ""
}

func (m *GroupInfo) GetUserRole() int32 {
	if m != nil && m.UserRole != nil {
		return *m.UserRole
	}
	return 0
}

func (m *GroupInfo) GetMyInfo() *GroupMemberInfo {
	if m != nil {
		return m.MyInfo
	}
	return nil
}

func (m *GroupInfo) GetMemberList() []*GroupMemberInfo {
	if m != nil {
		return m.MemberList
	}
	return nil
}

type GroupAnnounce struct {
	GroupID          *int32  `protobuf:"varint,1,opt,name=groupID" json:"groupID,omitempty"`
	AnnounceID       *int32  `protobuf:"varint,2,opt,name=announceID" json:"announceID,omitempty"`
	Title            *string `protobuf:"bytes,3,opt,name=title" json:"title,omitempty"`
	Sender           *string `protobuf:"bytes,4,opt,name=sender" json:"sender,omitempty"`
	SendTime         *string `protobuf:"bytes,5,opt,name=sendTime" json:"sendTime,omitempty"`
	Content          *string `protobuf:"bytes,6,opt,name=content" json:"content,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *GroupAnnounce) Reset()                    { *m = GroupAnnounce{} }
func (m *GroupAnnounce) String() string            { return proto.CompactTextString(m) }
func (*GroupAnnounce) ProtoMessage()               {}
func (*GroupAnnounce) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{12} }

func (m *GroupAnnounce) GetGroupID() int32 {
	if m != nil && m.GroupID != nil {
		return *m.GroupID
	}
	return 0
}

func (m *GroupAnnounce) GetAnnounceID() int32 {
	if m != nil && m.AnnounceID != nil {
		return *m.AnnounceID
	}
	return 0
}

func (m *GroupAnnounce) GetTitle() string {
	if m != nil && m.Title != nil {
		return *m.Title
	}
	return ""
}

func (m *GroupAnnounce) GetSender() string {
	if m != nil && m.Sender != nil {
		return *m.Sender
	}
	return ""
}

func (m *GroupAnnounce) GetSendTime() string {
	if m != nil && m.SendTime != nil {
		return *m.SendTime
	}
	return ""
}

func (m *GroupAnnounce) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

type GroupMsg struct {
	GroupID          *int32    `protobuf:"varint,1,opt,name=groupID" json:"groupID,omitempty"`
	MsgID            *string   `protobuf:"bytes,3,opt,name=msgID" json:"msgID,omitempty"`
	MsgTime          *string   `protobuf:"bytes,5,opt,name=msgTime" json:"msgTime,omitempty"`
	DataType         *DataType `protobuf:"varint,7,opt,name=dataType,enum=com.cst14.im.protobuf.DataType" json:"dataType,omitempty"`
	Text             *string   `protobuf:"bytes,9,opt,name=Text,json=text" json:"Text,omitempty"`
	SenderName       *string   `protobuf:"bytes,11,opt,name=senderName" json:"senderName,omitempty"`
	Nick             *string   `protobuf:"bytes,12,opt,name=nick" json:"nick,omitempty"`
	VoiceTime        *int32    `protobuf:"varint,13,opt,name=voiceTime" json:"voiceTime,omitempty"`
	FileInfo         *FileInfo `protobuf:"bytes,14,opt,name=fileInfo" json:"fileInfo,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *GroupMsg) Reset()                    { *m = GroupMsg{} }
func (m *GroupMsg) String() string            { return proto.CompactTextString(m) }
func (*GroupMsg) ProtoMessage()               {}
func (*GroupMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{13} }

func (m *GroupMsg) GetGroupID() int32 {
	if m != nil && m.GroupID != nil {
		return *m.GroupID
	}
	return 0
}

func (m *GroupMsg) GetMsgID() string {
	if m != nil && m.MsgID != nil {
		return *m.MsgID
	}
	return ""
}

func (m *GroupMsg) GetMsgTime() string {
	if m != nil && m.MsgTime != nil {
		return *m.MsgTime
	}
	return ""
}

func (m *GroupMsg) GetDataType() DataType {
	if m != nil && m.DataType != nil {
		return *m.DataType
	}
	return DataType_TEXT
}

func (m *GroupMsg) GetText() string {
	if m != nil && m.Text != nil {
		return *m.Text
	}
	return ""
}

func (m *GroupMsg) GetSenderName() string {
	if m != nil && m.SenderName != nil {
		return *m.SenderName
	}
	return ""
}

func (m *GroupMsg) GetNick() string {
	if m != nil && m.Nick != nil {
		return *m.Nick
	}
	return ""
}

func (m *GroupMsg) GetVoiceTime() int32 {
	if m != nil && m.VoiceTime != nil {
		return *m.VoiceTime
	}
	return 0
}

func (m *GroupMsg) GetFileInfo() *FileInfo {
	if m != nil {
		return m.FileInfo
	}
	return nil
}

type GroupHistoryMsg struct {
	GroupID          *int32    `protobuf:"varint,1,opt,name=groupID" json:"groupID,omitempty"`
	SendID           *int32    `protobuf:"varint,2,opt,name=sendID" json:"sendID,omitempty"`
	MsgTime          *string   `protobuf:"bytes,3,opt,name=msgTime" json:"msgTime,omitempty"`
	DataType         *DataType `protobuf:"varint,4,opt,name=dataType,enum=com.cst14.im.protobuf.DataType" json:"dataType,omitempty"`
	Content          *string   `protobuf:"bytes,5,opt,name=content" json:"content,omitempty"`
	SendName         *string   `protobuf:"bytes,6,opt,name=sendName" json:"sendName,omitempty"`
	FileName         *string   `protobuf:"bytes,7,opt,name=fileName" json:"fileName,omitempty"`
	XXX_unrecognized []byte    `json:"-"`
}

func (m *GroupHistoryMsg) Reset()                    { *m = GroupHistoryMsg{} }
func (m *GroupHistoryMsg) String() string            { return proto.CompactTextString(m) }
func (*GroupHistoryMsg) ProtoMessage()               {}
func (*GroupHistoryMsg) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{14} }

func (m *GroupHistoryMsg) GetGroupID() int32 {
	if m != nil && m.GroupID != nil {
		return *m.GroupID
	}
	return 0
}

func (m *GroupHistoryMsg) GetSendID() int32 {
	if m != nil && m.SendID != nil {
		return *m.SendID
	}
	return 0
}

func (m *GroupHistoryMsg) GetMsgTime() string {
	if m != nil && m.MsgTime != nil {
		return *m.MsgTime
	}
	return ""
}

func (m *GroupHistoryMsg) GetDataType() DataType {
	if m != nil && m.DataType != nil {
		return *m.DataType
	}
	return DataType_TEXT
}

func (m *GroupHistoryMsg) GetContent() string {
	if m != nil && m.Content != nil {
		return *m.Content
	}
	return ""
}

func (m *GroupHistoryMsg) GetSendName() string {
	if m != nil && m.SendName != nil {
		return *m.SendName
	}
	return ""
}

func (m *GroupHistoryMsg) GetFileName() string {
	if m != nil && m.FileName != nil {
		return *m.FileName
	}
	return ""
}

type FeedBack struct {
	Status           *MsgStatus `protobuf:"varint,1,opt,name=status,enum=com.cst14.im.protobuf.MsgStatus" json:"status,omitempty"`
	UserName         *string    `protobuf:"bytes,2,opt,name=userName" json:"userName,omitempty"`
	MsgID            *string    `protobuf:"bytes,4,opt,name=msgID" json:"msgID,omitempty"`
	MsgTime          *string    `protobuf:"bytes,6,opt,name=msgTime" json:"msgTime,omitempty"`
	GroupID          *int32     `protobuf:"varint,8,opt,name=groupID" json:"groupID,omitempty"`
	Reason           *string    `protobuf:"bytes,9,opt,name=reason" json:"reason,omitempty"`
	XXX_unrecognized []byte     `json:"-"`
}

func (m *FeedBack) Reset()                    { *m = FeedBack{} }
func (m *FeedBack) String() string            { return proto.CompactTextString(m) }
func (*FeedBack) ProtoMessage()               {}
func (*FeedBack) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{15} }

func (m *FeedBack) GetStatus() MsgStatus {
	if m != nil && m.Status != nil {
		return *m.Status
	}
	return MsgStatus_SEND_FAIL
}

func (m *FeedBack) GetUserName() string {
	if m != nil && m.UserName != nil {
		return *m.UserName
	}
	return ""
}

func (m *FeedBack) GetMsgID() string {
	if m != nil && m.MsgID != nil {
		return *m.MsgID
	}
	return ""
}

func (m *FeedBack) GetMsgTime() string {
	if m != nil && m.MsgTime != nil {
		return *m.MsgTime
	}
	return ""
}

func (m *FeedBack) GetGroupID() int32 {
	if m != nil && m.GroupID != nil {
		return *m.GroupID
	}
	return 0
}

func (m *FeedBack) GetReason() string {
	if m != nil && m.Reason != nil {
		return *m.Reason
	}
	return ""
}

type FileInfo struct {
	Path             *string `protobuf:"bytes,1,opt,name=path" json:"path,omitempty"`
	Name             *string `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Ext              *string `protobuf:"bytes,3,opt,name=ext" json:"ext,omitempty"`
	Size             *int32  `protobuf:"varint,4,opt,name=size" json:"size,omitempty"`
	FileByte         []byte  `protobuf:"bytes,7,opt,name=fileByte" json:"fileByte,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *FileInfo) Reset()                    { *m = FileInfo{} }
func (m *FileInfo) String() string            { return proto.CompactTextString(m) }
func (*FileInfo) ProtoMessage()               {}
func (*FileInfo) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{16} }

func (m *FileInfo) GetPath() string {
	if m != nil && m.Path != nil {
		return *m.Path
	}
	return ""
}

func (m *FileInfo) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *FileInfo) GetExt() string {
	if m != nil && m.Ext != nil {
		return *m.Ext
	}
	return ""
}

func (m *FileInfo) GetSize() int32 {
	if m != nil && m.Size != nil {
		return *m.Size
	}
	return 0
}

func (m *FileInfo) GetFileByte() []byte {
	if m != nil {
		return m.FileByte
	}
	return nil
}

type MsgSecurity struct {
	EmailBind        *MsgEmail    `protobuf:"bytes,1,opt,name=emailBind" json:"emailBind,omitempty"`
	QuestionSet      *MsgQuestion `protobuf:"bytes,2,opt,name=questionSet" json:"questionSet,omitempty"`
	PhoneBind        *MsgPhone    `protobuf:"bytes,3,opt,name=phoneBind" json:"phoneBind,omitempty"`
	Pwd              *string      `protobuf:"bytes,4,opt,name=pwd" json:"pwd,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *MsgSecurity) Reset()                    { *m = MsgSecurity{} }
func (m *MsgSecurity) String() string            { return proto.CompactTextString(m) }
func (*MsgSecurity) ProtoMessage()               {}
func (*MsgSecurity) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{17} }

func (m *MsgSecurity) GetEmailBind() *MsgEmail {
	if m != nil {
		return m.EmailBind
	}
	return nil
}

func (m *MsgSecurity) GetQuestionSet() *MsgQuestion {
	if m != nil {
		return m.QuestionSet
	}
	return nil
}

func (m *MsgSecurity) GetPhoneBind() *MsgPhone {
	if m != nil {
		return m.PhoneBind
	}
	return nil
}

func (m *MsgSecurity) GetPwd() string {
	if m != nil && m.Pwd != nil {
		return *m.Pwd
	}
	return ""
}

type MsgEmail struct {
	UserEmail        *string      `protobuf:"bytes,1,opt,name=userEmail" json:"userEmail,omitempty"`
	UserEmailStatus  *EmailStauts `protobuf:"varint,2,opt,name=userEmailStatus,enum=com.cst14.im.protobuf.EmailStauts" json:"userEmailStatus,omitempty"`
	BindTime         *string      `protobuf:"bytes,3,opt,name=bindTime" json:"bindTime,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *MsgEmail) Reset()                    { *m = MsgEmail{} }
func (m *MsgEmail) String() string            { return proto.CompactTextString(m) }
func (*MsgEmail) ProtoMessage()               {}
func (*MsgEmail) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{18} }

func (m *MsgEmail) GetUserEmail() string {
	if m != nil && m.UserEmail != nil {
		return *m.UserEmail
	}
	return ""
}

func (m *MsgEmail) GetUserEmailStatus() EmailStauts {
	if m != nil && m.UserEmailStatus != nil {
		return *m.UserEmailStatus
	}
	return EmailStauts_UNBOUND
}

func (m *MsgEmail) GetBindTime() string {
	if m != nil && m.BindTime != nil {
		return *m.BindTime
	}
	return ""
}

type MsgQuestion struct {
	PswQuetion1      *string `protobuf:"bytes,1,opt,name=pswQuetion1" json:"pswQuetion1,omitempty"`
	PswQuetion2      *string `protobuf:"bytes,2,opt,name=pswQuetion2" json:"pswQuetion2,omitempty"`
	PswQuetion3      *string `protobuf:"bytes,3,opt,name=pswQuetion3" json:"pswQuetion3,omitempty"`
	PswAnswer        *string `protobuf:"bytes,4,opt,name=pswAnswer" json:"pswAnswer,omitempty"`
	PswQuetionNumber *int32  `protobuf:"varint,5,opt,name=pswQuetionNumber" json:"pswQuetionNumber,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *MsgQuestion) Reset()                    { *m = MsgQuestion{} }
func (m *MsgQuestion) String() string            { return proto.CompactTextString(m) }
func (*MsgQuestion) ProtoMessage()               {}
func (*MsgQuestion) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{19} }

func (m *MsgQuestion) GetPswQuetion1() string {
	if m != nil && m.PswQuetion1 != nil {
		return *m.PswQuetion1
	}
	return ""
}

func (m *MsgQuestion) GetPswQuetion2() string {
	if m != nil && m.PswQuetion2 != nil {
		return *m.PswQuetion2
	}
	return ""
}

func (m *MsgQuestion) GetPswQuetion3() string {
	if m != nil && m.PswQuetion3 != nil {
		return *m.PswQuetion3
	}
	return ""
}

func (m *MsgQuestion) GetPswAnswer() string {
	if m != nil && m.PswAnswer != nil {
		return *m.PswAnswer
	}
	return ""
}

func (m *MsgQuestion) GetPswQuetionNumber() int32 {
	if m != nil && m.PswQuetionNumber != nil {
		return *m.PswQuetionNumber
	}
	return 0
}

type MsgPhone struct {
	UserPhone        *string      `protobuf:"bytes,1,opt,name=userPhone" json:"userPhone,omitempty"`
	UserPhoneStatus  *EmailStauts `protobuf:"varint,2,opt,name=userPhoneStatus,enum=com.cst14.im.protobuf.EmailStauts" json:"userPhoneStatus,omitempty"`
	BindTime         *string      `protobuf:"bytes,3,opt,name=bindTime" json:"bindTime,omitempty"`
	XXX_unrecognized []byte       `json:"-"`
}

func (m *MsgPhone) Reset()                    { *m = MsgPhone{} }
func (m *MsgPhone) String() string            { return proto.CompactTextString(m) }
func (*MsgPhone) ProtoMessage()               {}
func (*MsgPhone) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{20} }

func (m *MsgPhone) GetUserPhone() string {
	if m != nil && m.UserPhone != nil {
		return *m.UserPhone
	}
	return ""
}

func (m *MsgPhone) GetUserPhoneStatus() EmailStauts {
	if m != nil && m.UserPhoneStatus != nil {
		return *m.UserPhoneStatus
	}
	return EmailStauts_UNBOUND
}

func (m *MsgPhone) GetBindTime() string {
	if m != nil && m.BindTime != nil {
		return *m.BindTime
	}
	return ""
}

type Nearby struct {
	Avatar           []byte   `protobuf:"bytes,1,opt,name=avatar" json:"avatar,omitempty"`
	Name             *string  `protobuf:"bytes,2,opt,name=name" json:"name,omitempty"`
	Nick             *string  `protobuf:"bytes,3,opt,name=nick" json:"nick,omitempty"`
	Age              *int32   `protobuf:"varint,4,opt,name=age" json:"age,omitempty"`
	Sex              *string  `protobuf:"bytes,5,opt,name=sex" json:"sex,omitempty"`
	Intro            *string  `protobuf:"bytes,6,opt,name=intro" json:"intro,omitempty"`
	Distance         *float64 `protobuf:"fixed64,7,opt,name=distance" json:"distance,omitempty"`
	UpdateTime       *string  `protobuf:"bytes,9,opt,name=updateTime" json:"updateTime,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Nearby) Reset()                    { *m = Nearby{} }
func (m *Nearby) String() string            { return proto.CompactTextString(m) }
func (*Nearby) ProtoMessage()               {}
func (*Nearby) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{21} }

func (m *Nearby) GetAvatar() []byte {
	if m != nil {
		return m.Avatar
	}
	return nil
}

func (m *Nearby) GetName() string {
	if m != nil && m.Name != nil {
		return *m.Name
	}
	return ""
}

func (m *Nearby) GetNick() string {
	if m != nil && m.Nick != nil {
		return *m.Nick
	}
	return ""
}

func (m *Nearby) GetAge() int32 {
	if m != nil && m.Age != nil {
		return *m.Age
	}
	return 0
}

func (m *Nearby) GetSex() string {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return ""
}

func (m *Nearby) GetIntro() string {
	if m != nil && m.Intro != nil {
		return *m.Intro
	}
	return ""
}

func (m *Nearby) GetDistance() float64 {
	if m != nil && m.Distance != nil {
		return *m.Distance
	}
	return 0
}

func (m *Nearby) GetUpdateTime() string {
	if m != nil && m.UpdateTime != nil {
		return *m.UpdateTime
	}
	return ""
}

type Location struct {
	Latitude         *float64 `protobuf:"fixed64,1,opt,name=latitude" json:"latitude,omitempty"`
	Longitude        *float64 `protobuf:"fixed64,2,opt,name=longitude" json:"longitude,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *Location) Reset()                    { *m = Location{} }
func (m *Location) String() string            { return proto.CompactTextString(m) }
func (*Location) ProtoMessage()               {}
func (*Location) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{22} }

func (m *Location) GetLatitude() float64 {
	if m != nil && m.Latitude != nil {
		return *m.Latitude
	}
	return 0
}

func (m *Location) GetLongitude() float64 {
	if m != nil && m.Longitude != nil {
		return *m.Longitude
	}
	return 0
}

type PersonalMsgReadingRecord struct {
	ReadTime         *string `protobuf:"bytes,1,req,name=readTime" json:"readTime,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *PersonalMsgReadingRecord) Reset()                    { *m = PersonalMsgReadingRecord{} }
func (m *PersonalMsgReadingRecord) String() string            { return proto.CompactTextString(m) }
func (*PersonalMsgReadingRecord) ProtoMessage()               {}
func (*PersonalMsgReadingRecord) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{23} }

func (m *PersonalMsgReadingRecord) GetReadTime() string {
	if m != nil && m.ReadTime != nil {
		return *m.ReadTime
	}
	return ""
}

type NearbyCondition struct {
	Sex              *Sex    `protobuf:"varint,1,opt,name=sex,enum=com.cst14.im.protobuf.Sex" json:"sex,omitempty"`
	Active           *Active `protobuf:"varint,4,opt,name=active,enum=com.cst14.im.protobuf.Active" json:"active,omitempty"`
	IsAllAge         *bool   `protobuf:"varint,7,opt,name=isAllAge" json:"isAllAge,omitempty"`
	MinAge           *int32  `protobuf:"varint,10,opt,name=minAge" json:"minAge,omitempty"`
	MaxAge           *int32  `protobuf:"varint,13,opt,name=maxAge" json:"maxAge,omitempty"`
	XXX_unrecognized []byte  `json:"-"`
}

func (m *NearbyCondition) Reset()                    { *m = NearbyCondition{} }
func (m *NearbyCondition) String() string            { return proto.CompactTextString(m) }
func (*NearbyCondition) ProtoMessage()               {}
func (*NearbyCondition) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{24} }

func (m *NearbyCondition) GetSex() Sex {
	if m != nil && m.Sex != nil {
		return *m.Sex
	}
	return Sex_ALL
}

func (m *NearbyCondition) GetActive() Active {
	if m != nil && m.Active != nil {
		return *m.Active
	}
	return Active_ONE_DAY
}

func (m *NearbyCondition) GetIsAllAge() bool {
	if m != nil && m.IsAllAge != nil {
		return *m.IsAllAge
	}
	return false
}

func (m *NearbyCondition) GetMinAge() int32 {
	if m != nil && m.MinAge != nil {
		return *m.MinAge
	}
	return 0
}

func (m *NearbyCondition) GetMaxAge() int32 {
	if m != nil && m.MaxAge != nil {
		return *m.MaxAge
	}
	return 0
}

type NearbySetting struct {
	IsCanBeFind      *bool    `protobuf:"varint,1,opt,name=isCanBeFind" json:"isCanBeFind,omitempty"`
	IsNeedTip        *bool    `protobuf:"varint,2,opt,name=isNeedTip" json:"isNeedTip,omitempty"`
	TipDistance      *float64 `protobuf:"fixed64,3,opt,name=tipDistance" json:"tipDistance,omitempty"`
	XXX_unrecognized []byte   `json:"-"`
}

func (m *NearbySetting) Reset()                    { *m = NearbySetting{} }
func (m *NearbySetting) String() string            { return proto.CompactTextString(m) }
func (*NearbySetting) ProtoMessage()               {}
func (*NearbySetting) Descriptor() ([]byte, []int) { return fileDescriptor0, []int{25} }

func (m *NearbySetting) GetIsCanBeFind() bool {
	if m != nil && m.IsCanBeFind != nil {
		return *m.IsCanBeFind
	}
	return false
}

func (m *NearbySetting) GetIsNeedTip() bool {
	if m != nil && m.IsNeedTip != nil {
		return *m.IsNeedTip
	}
	return false
}

func (m *NearbySetting) GetTipDistance() float64 {
	if m != nil && m.TipDistance != nil {
		return *m.TipDistance
	}
	return 0
}

func init() {
	proto.RegisterType((*Msg)(nil), "com.cst14.im.protobuf.Msg")
	proto.RegisterType((*User)(nil), "com.cst14.im.protobuf.User")
	proto.RegisterType((*Attrtype)(nil), "com.cst14.im.protobuf.Attrtype")
	proto.RegisterType((*FriendList)(nil), "com.cst14.im.protobuf.FriendList")
	proto.RegisterType((*UserDetail)(nil), "com.cst14.im.protobuf.UserDetail")
	proto.RegisterType((*UserCustomAttr)(nil), "com.cst14.im.protobuf.UserCustomAttr")
	proto.RegisterType((*SearchInfo)(nil), "com.cst14.im.protobuf.SearchInfo")
	proto.RegisterType((*Group)(nil), "com.cst14.im.protobuf.Group")
	proto.RegisterType((*MsgForFileUpload)(nil), "com.cst14.im.protobuf.MsgForFileUpload")
	proto.RegisterType((*PersonalMsg)(nil), "com.cst14.im.protobuf.PersonalMsg")
	proto.RegisterType((*GroupMemberInfo)(nil), "com.cst14.im.protobuf.GroupMemberInfo")
	proto.RegisterType((*GroupInfo)(nil), "com.cst14.im.protobuf.GroupInfo")
	proto.RegisterType((*GroupAnnounce)(nil), "com.cst14.im.protobuf.GroupAnnounce")
	proto.RegisterType((*GroupMsg)(nil), "com.cst14.im.protobuf.GroupMsg")
	proto.RegisterType((*GroupHistoryMsg)(nil), "com.cst14.im.protobuf.GroupHistoryMsg")
	proto.RegisterType((*FeedBack)(nil), "com.cst14.im.protobuf.FeedBack")
	proto.RegisterType((*FileInfo)(nil), "com.cst14.im.protobuf.FileInfo")
	proto.RegisterType((*MsgSecurity)(nil), "com.cst14.im.protobuf.MsgSecurity")
	proto.RegisterType((*MsgEmail)(nil), "com.cst14.im.protobuf.MsgEmail")
	proto.RegisterType((*MsgQuestion)(nil), "com.cst14.im.protobuf.MsgQuestion")
	proto.RegisterType((*MsgPhone)(nil), "com.cst14.im.protobuf.MsgPhone")
	proto.RegisterType((*Nearby)(nil), "com.cst14.im.protobuf.Nearby")
	proto.RegisterType((*Location)(nil), "com.cst14.im.protobuf.Location")
	proto.RegisterType((*PersonalMsgReadingRecord)(nil), "com.cst14.im.protobuf.PersonalMsgReadingRecord")
	proto.RegisterType((*NearbyCondition)(nil), "com.cst14.im.protobuf.NearbyCondition")
	proto.RegisterType((*NearbySetting)(nil), "com.cst14.im.protobuf.NearbySetting")
	proto.RegisterEnum("com.cst14.im.protobuf.MsgType", MsgType_name, MsgType_value)
	proto.RegisterEnum("com.cst14.im.protobuf.StatusCode", StatusCode_name, StatusCode_value)
	proto.RegisterEnum("com.cst14.im.protobuf.UserRole", UserRole_name, UserRole_value)
	proto.RegisterEnum("com.cst14.im.protobuf.MsgStatus", MsgStatus_name, MsgStatus_value)
	proto.RegisterEnum("com.cst14.im.protobuf.DataType", DataType_name, DataType_value)
	proto.RegisterEnum("com.cst14.im.protobuf.EmailStauts", EmailStauts_name, EmailStauts_value)
	proto.RegisterEnum("com.cst14.im.protobuf.QuestionStatus", QuestionStatus_name, QuestionStatus_value)
	proto.RegisterEnum("com.cst14.im.protobuf.Sex", Sex_name, Sex_value)
	proto.RegisterEnum("com.cst14.im.protobuf.Active", Active_name, Active_value)
}

var fileDescriptor0 = []byte{
	// 3861 bytes of a gzipped FileDescriptorProto
	0x1f, 0x8b, 0x08, 0x00, 0x00, 0x09, 0x6e, 0x88, 0x02, 0xff, 0x9c, 0x5a, 0x4b, 0x77, 0xe3, 0xc8,
	0x75, 0x36, 0x45, 0x3d, 0xa8, 0xd2, 0x0b, 0x0d, 0xbb, 0xc7, 0x98, 0x77, 0x87, 0xee, 0x19, 0x8f,
	0x15, 0xa7, 0x7d, 0x3c, 0xf1, 0x38, 0xe3, 0x38, 0xe3, 0x0c, 0x44, 0x82, 0x12, 0xa6, 0x49, 0x90,
	0x5d, 0x20, 0xbb, 0xa7, 0x93, 0xd8, 0x0c, 0x44, 0x42, 0x12, 0xa6, 0x29, 0x90, 0x0d, 0x80, 0xdd,
	0x2d, 0xe7, 0xb9, 0xcc, 0x39, 0x39, 0x27, 0x8b, 0xe4, 0x9c, 0xac, 0xf2, 0x17, 0xbc, 0xf3, 0x36,
	0x59, 0x64, 0x9d, 0x7f, 0x91, 0x6d, 0x76, 0xf9, 0x03, 0xb9, 0x8f, 0x2a, 0x3c, 0xa4, 0xa1, 0xa6,
	0x9d, 0x95, 0x70, 0x6f, 0xdd, 0x5b, 0x75, 0xeb, 0xbb, 0x8f, 0xba, 0x55, 0x94, 0xd8, 0x5b, 0x24,
	0xf3, 0xaf, 0xc2, 0x49, 0xf6, 0x00, 0xfe, 0x66, 0x73, 0xf3, 0xee, 0x64, 0x7e, 0xf9, 0x60, 0x92,
	0x66, 0x3f, 0xfe, 0xc9, 0x83, 0xe8, 0x92, 0x79, 0xa7, 0xcb, 0xb3, 0xe6, 0xdf, 0xdf, 0x11, 0xf5,
	0x5e, 0x7a, 0x6e, 0x7e, 0x2a, 0xb6, 0x2e, 0xd3, 0xf3, 0xe1, 0xd5, 0x22, 0xb4, 0x6a, 0xf7, 0xd6,
	0x3e, 0xda, 0xff, 0xf8, 0xbd, 0x07, 0x5f, 0xab, 0xf0, 0xa0, 0xc7, 0x52, 0x52, 0x8b, 0x9b, 0x4d,
	0xb1, 0x0b, 0x9f, 0xa3, 0x38, 0x7a, 0xbe, 0x0c, 0x87, 0xc1, 0xb9, 0xb5, 0x76, 0xaf, 0xf6, 0xd1,
	0xb6, 0xac, 0xf0, 0xcc, 0x63, 0xb1, 0x97, 0x84, 0xe9, 0x62, 0x1e, 0xa7, 0xa1, 0x9f, 0x05, 0x59,
	0x68, 0xd5, 0x41, 0x68, 0xff, 0xe3, 0xdf, 0x5b, 0xb1, 0x06, 0xca, 0x2c, 0xd3, 0xd6, 0x7c, 0x1a,
	0xca, 0xaa, 0x9e, 0x69, 0x89, 0xad, 0x60, 0x32, 0x99, 0x2f, 0xe3, 0xcc, 0x5a, 0xa7, 0x75, 0x34,
	0x69, 0x1a, 0xa2, 0xbe, 0x78, 0x39, 0xb5, 0x36, 0x88, 0x8b, 0x9f, 0xe6, 0x77, 0xc4, 0x46, 0x36,
	0x7f, 0x16, 0xc6, 0xd6, 0x26, 0xf1, 0x98, 0x30, 0xdf, 0x10, 0x9b, 0x61, 0x92, 0xc0, 0x2e, 0xac,
	0x2d, 0x62, 0x2b, 0xca, 0xfc, 0x91, 0x58, 0x5f, 0xa6, 0x61, 0x62, 0x35, 0x80, 0xbb, 0xf3, 0xf1,
	0xdb, 0x2b, 0x2c, 0x1b, 0x81, 0x88, 0x24, 0x41, 0xf3, 0x13, 0xb1, 0x75, 0x96, 0x44, 0x61, 0x3c,
	0x4d, 0xad, 0xed, 0x7b, 0xf5, 0x6f, 0xd2, 0xd1, 0xb2, 0x66, 0x4b, 0xec, 0xf0, 0x67, 0x37, 0x4a,
	0xb3, 0xd4, 0x12, 0xa4, 0xba, 0x0a, 0x88, 0x4e, 0x2e, 0x29, 0xcb, 0x5a, 0xe6, 0x91, 0x10, 0xfd,
	0xb3, 0xb3, 0x59, 0x14, 0x87, 0xb8, 0x91, 0x1d, 0x9a, 0xa3, 0xb9, 0x62, 0x8e, 0x41, 0x98, 0xa4,
	0xf3, 0x38, 0x98, 0x81, 0xa4, 0x14, 0xf3, 0x5c, 0xcb, 0x74, 0xc5, 0x81, 0x9a, 0xe3, 0x38, 0x99,
	0x2f, 0x17, 0x38, 0xd1, 0x2e, 0x4d, 0xf4, 0xfe, 0x8a, 0x89, 0xb4, 0x98, 0x3c, 0x98, 0x57, 0xf5,
	0xcc, 0x9f, 0x88, 0xcd, 0x73, 0xfc, 0x4e, 0xad, 0x3d, 0x9a, 0xe1, 0x9d, 0xdb, 0x66, 0x90, 0x4a,
	0xd6, 0xfc, 0x4c, 0x34, 0xd2, 0x64, 0x72, 0xe1, 0xc6, 0x67, 0x73, 0x6b, 0x9f, 0x50, 0x5f, 0x19,
	0x0f, 0x61, 0xa0, 0x04, 0x65, 0xae, 0x02, 0x31, 0x65, 0xc4, 0xe1, 0x4b, 0x46, 0x48, 0x86, 0x10,
	0x68, 0x69, 0x66, 0x1d, 0x7c, 0xb3, 0x23, 0x6e, 0x28, 0x99, 0xa6, 0x58, 0x77, 0x7b, 0x8e, 0x6b,
	0xdd, 0xa5, 0x78, 0x58, 0x8f, 0xe0, 0x1b, 0xa3, 0x24, 0xcd, 0x92, 0x67, 0xe1, 0x95, 0xf5, 0x1e,
	0x47, 0x09, 0x53, 0x18, 0x7f, 0x64, 0xbd, 0xdb, 0xb6, 0xde, 0x87, 0x81, 0x0d, 0xa9, 0x49, 0x9c,
	0x65, 0x11, 0x64, 0x17, 0xd6, 0xf7, 0x78, 0x16, 0xfc, 0x46, 0x69, 0xcc, 0x92, 0xe8, 0x32, 0xb4,
	0xee, 0x73, 0xb4, 0x2a, 0xd2, 0x7c, 0x47, 0x6c, 0x93, 0xa2, 0x17, 0xc0, 0xd8, 0x07, 0x34, 0x56,
	0x30, 0xcc, 0x9f, 0x8b, 0xc6, 0x59, 0x18, 0x4e, 0x8f, 0x82, 0xc9, 0x33, 0xeb, 0x43, 0x42, 0x66,
	0x95, 0x4f, 0x3a, 0x4a, 0x4c, 0xe6, 0x0a, 0xe6, 0xe7, 0x62, 0x7b, 0x41, 0x2e, 0x47, 0x8f, 0xfa,
	0xaf, 0x1d, 0x1a, 0x85, 0x12, 0x2e, 0x7f, 0xae, 0x43, 0xe2, 0x07, 0xb7, 0x2e, 0x9f, 0x87, 0x44,
	0xae, 0x60, 0xfe, 0x42, 0xed, 0x8c, 0xdc, 0xfa, 0xfb, 0xb4, 0xfc, 0xbd, 0xdb, 0xb4, 0xc9, 0xab,
	0x85, 0x0a, 0x98, 0xdf, 0x08, 0xe2, 0x18, 0x52, 0x7a, 0x12, 0x5a, 0x1f, 0x91, 0xfa, 0xfd, 0xdb,
	0xd4, 0x6d, 0x25, 0x2b, 0x73, 0x2d, 0xf3, 0x2d, 0xd1, 0x00, 0x98, 0xdd, 0x78, 0x1a, 0xbe, 0xb2,
	0x7e, 0x48, 0x4e, 0xca, 0x69, 0x1c, 0xe3, 0x3c, 0x02, 0x07, 0xfe, 0x01, 0x8f, 0x69, 0xda, 0xec,
	0x88, 0xdd, 0x34, 0x9c, 0x2c, 0x93, 0x28, 0xbb, 0x72, 0xb3, 0xf0, 0xd2, 0x1a, 0xd0, 0xd6, 0x9b,
	0xab, 0xeb, 0xa0, 0xaf, 0xa4, 0x65, 0x45, 0xcf, 0x6c, 0x8b, 0x9d, 0x45, 0x01, 0xac, 0xf5, 0xe8,
	0xd6, 0x69, 0xca, 0x2e, 0x28, 0xab, 0x99, 0x3d, 0xb1, 0x77, 0x16, 0xcd, 0xc2, 0xd1, 0x62, 0x36,
	0x0f, 0xa6, 0x38, 0x8f, 0xa4, 0x79, 0xbe, 0xbf, 0xda, 0x9c, 0xce, 0x3c, 0xe9, 0xe4, 0x1a, 0xb2,
	0xaa, 0x0d, 0xd5, 0x6a, 0x33, 0x86, 0x2c, 0x3a, 0xba, 0xb2, 0xfe, 0x8c, 0x40, 0x7d, 0x77, 0xc5,
	0x3c, 0x1e, 0x08, 0x9d, 0x5e, 0x49, 0x25, 0x8c, 0xa1, 0x30, 0x9b, 0x4f, 0x82, 0x2c, 0x9a, 0xc7,
	0xd6, 0x9f, 0xdf, 0x1a, 0x0a, 0x5d, 0x25, 0x26, 0x73, 0x05, 0xc8, 0xd0, 0xcd, 0x24, 0x9c, 0xcc,
	0x93, 0xa9, 0xf5, 0x17, 0xa4, 0xfa, 0xa3, 0xd7, 0xc0, 0x20, 0x0c, 0xa6, 0x51, 0x0c, 0x7f, 0x50,
	0x4d, 0x2a, 0x75, 0x73, 0x20, 0x0e, 0x62, 0xb2, 0xab, 0x35, 0x8f, 0xa7, 0x11, 0x19, 0xf3, 0x4b,
	0x9a, 0xf1, 0xc3, 0x5b, 0x77, 0x91, 0x4b, 0xcb, 0xeb, 0xea, 0xe6, 0x7d, 0xb1, 0x07, 0x1e, 0x63,
	0xb1, 0x41, 0x70, 0x1e, 0x5a, 0xbf, 0xa2, 0x60, 0xa8, 0x32, 0xcd, 0x2f, 0xc4, 0x1e, 0x2b, 0xfa,
	0x61, 0x96, 0x81, 0x59, 0xd6, 0x5f, 0xd2, 0xaa, 0xf7, 0x6f, 0x5d, 0x55, 0xc9, 0xca, 0xaa, 0x2a,
	0x46, 0x5e, 0x72, 0x9e, 0x66, 0x74, 0xc2, 0x4e, 0x39, 0xf2, 0x34, 0x8d, 0x75, 0x22, 0x3a, 0xeb,
	0xce, 0xcf, 0xa3, 0xd8, 0x0a, 0x61, 0xa8, 0x21, 0x35, 0x89, 0xf8, 0x07, 0x59, 0x96, 0x90, 0xd6,
	0xd9, 0xad, 0xf8, 0xdb, 0x20, 0x96, 0xe1, 0xc1, 0x9c, 0x2b, 0xe0, 0x92, 0x78, 0x52, 0xf5, 0x82,
	0xe4, 0x99, 0x75, 0x4e, 0x35, 0x26, 0xa7, 0xf1, 0xd4, 0x8e, 0x52, 0x2c, 0x88, 0xce, 0x2b, 0x3a,
	0x87, 0x2e, 0x68, 0xdd, 0x0a, 0x0f, 0x4f, 0x08, 0xca, 0xcb, 0x13, 0xa0, 0xe6, 0xc9, 0x15, 0x06,
	0x61, 0xf4, 0x9a, 0x27, 0xc4, 0x35, 0x3d, 0x34, 0x25, 0x4a, 0xc1, 0xcf, 0x38, 0xc7, 0x57, 0xb4,
	0x54, 0x4e, 0x37, 0x7f, 0x53, 0x17, 0xeb, 0xb8, 0x2a, 0x16, 0x5d, 0xb4, 0x0f, 0x52, 0x13, 0x5b,
	0x90, 0x0d, 0xa9, 0x28, 0x84, 0x07, 0xbf, 0x06, 0x70, 0xbc, 0x73, 0x73, 0xa1, 0x49, 0x9c, 0x36,
	0x8e, 0x26, 0xcf, 0xa8, 0x8a, 0xd6, 0x79, 0x87, 0x9a, 0xc6, 0x82, 0x1c, 0x4d, 0x20, 0x52, 0xb0,
	0x4f, 0xd8, 0x95, 0xf4, 0x4d, 0x66, 0xc0, 0x5f, 0x92, 0xe7, 0x4e, 0x21, 0xa7, 0xd9, 0xc4, 0x7e,
	0x8c, 0x07, 0x1b, 0x75, 0x0c, 0x64, 0x22, 0xd3, 0x58, 0xae, 0xe1, 0xa8, 0x48, 0xdc, 0x38, 0x4b,
	0xe6, 0xaa, 0x6f, 0x28, 0x18, 0xe6, 0x7b, 0x42, 0xa0, 0x41, 0x72, 0x3e, 0x0b, 0xc1, 0xf6, 0x06,
	0x39, 0xb7, 0xc4, 0xc1, 0x7d, 0x25, 0xe1, 0x25, 0x7a, 0x61, 0x9b, 0x0f, 0x13, 0xa6, 0x4c, 0x9b,
	0xf5, 0xda, 0x61, 0x16, 0x44, 0x33, 0xe8, 0x04, 0x6e, 0x3b, 0x02, 0x47, 0xb9, 0xa0, 0x2c, 0x29,
	0x69, 0x17, 0xd3, 0x86, 0x76, 0x0a, 0x17, 0xd3, 0x86, 0x60, 0xd9, 0x19, 0x78, 0xc0, 0xeb, 0xc3,
	0xb9, 0x8e, 0x26, 0x29, 0x8a, 0xa2, 0x2d, 0xb5, 0xcf, 0x93, 0x30, 0x84, 0xe3, 0x9a, 0xa3, 0x8d,
	0x49, 0xca, 0x8a, 0x84, 0x8f, 0xf5, 0x6e, 0x74, 0x19, 0x65, 0x74, 0x2c, 0x63, 0x56, 0x94, 0x99,
	0xcd, 0xff, 0x5a, 0x13, 0x0d, 0x1d, 0x6d, 0x88, 0x32, 0x22, 0x0e, 0x1e, 0xc3, 0x99, 0xe8, 0x1b,
	0x1b, 0xaf, 0xc5, 0xc5, 0x1c, 0x60, 0x5c, 0x23, 0x26, 0x13, 0x88, 0x61, 0x12, 0x06, 0xb3, 0xc1,
	0x05, 0xec, 0x88, 0x9c, 0xd5, 0x90, 0x05, 0x83, 0x1a, 0xbb, 0xe9, 0x14, 0x9a, 0xbd, 0x94, 0x1c,
	0x06, 0x46, 0x29, 0x12, 0x1b, 0xbb, 0x14, 0x2a, 0xf9, 0x06, 0x71, 0xf1, 0x13, 0x39, 0x98, 0xb2,
	0xec, 0x24, 0xfc, 0x44, 0x18, 0x4e, 0xa3, 0x24, 0xbb, 0x98, 0x06, 0x57, 0xe4, 0x1e, 0xf0, 0x9d,
	0xa6, 0xd1, 0xc2, 0x4b, 0xc4, 0xb7, 0xc1, 0x16, 0xe2, 0xb7, 0xb9, 0x2f, 0xd6, 0x9e, 0x3f, 0x27,
	0x6f, 0x34, 0x24, 0x7c, 0x21, 0x54, 0x2f, 0xc3, 0xc9, 0x45, 0x90, 0x91, 0x17, 0x1a, 0x52, 0x51,
	0xc8, 0x8f, 0xa6, 0xad, 0x00, 0x2a, 0xd8, 0x0e, 0xf3, 0x99, 0x42, 0x6b, 0x01, 0x13, 0x1a, 0xd8,
	0x65, 0x6b, 0x15, 0x89, 0x96, 0x4c, 0xc3, 0xd3, 0x8c, 0x86, 0x18, 0xdd, 0x9c, 0x46, 0x5c, 0xd2,
	0x6c, 0xe9, 0x71, 0xb7, 0x03, 0xb8, 0x10, 0xd1, 0xfc, 0x5c, 0x88, 0xa2, 0xcd, 0x2b, 0x39, 0x4d,
	0xe5, 0x80, 0x72, 0x1a, 0xcc, 0x4b, 0x5f, 0xe8, 0x68, 0x4e, 0x82, 0x9c, 0x6e, 0xfe, 0x63, 0x5d,
	0x88, 0x22, 0x3e, 0x10, 0x9e, 0x65, 0x9e, 0x43, 0xf8, 0x59, 0x75, 0xc8, 0xb6, 0x76, 0x48, 0x09,
	0xf2, 0xba, 0xea, 0xa5, 0x15, 0xe4, 0x00, 0xcf, 0xa3, 0x47, 0xaa, 0xc1, 0x5e, 0x7b, 0xfe, 0xa8,
	0x04, 0x0f, 0x27, 0x8d, 0x86, 0x47, 0xb9, 0x86, 0xfb, 0xeb, 0xb2, 0x6b, 0xb6, 0x28, 0x6e, 0xc8,
	0x35, 0x05, 0x84, 0x0d, 0xd6, 0x55, 0x10, 0x6a, 0xb7, 0x70, 0x4a, 0xb0, 0x5b, 0x4a, 0xb0, 0x0a,
	0xb6, 0xe8, 0xeb, 0x60, 0x55, 0x71, 0x5e, 0x85, 0x75, 0x0a, 0xb0, 0xee, 0xf2, 0xee, 0x88, 0x40,
	0x6e, 0x44, 0xe9, 0xba, 0xc7, 0x5c, 0x22, 0x4c, 0x47, 0x88, 0xc9, 0x12, 0xaa, 0xd2, 0x25, 0x06,
	0xb0, 0xea, 0x3a, 0x3f, 0xb8, 0x25, 0xe5, 0x5a, 0xb9, 0xb0, 0x2c, 0x29, 0x56, 0xe2, 0xed, 0x80,
	0xcd, 0xd1, 0x74, 0xf3, 0x4c, 0xec, 0x57, 0x35, 0x57, 0xd6, 0xb5, 0xb7, 0xb8, 0xb8, 0x2b, 0x9f,
	0xd6, 0x71, 0x16, 0x4d, 0x9b, 0xf7, 0xc4, 0x0e, 0x7e, 0xc3, 0x89, 0x95, 0x85, 0x70, 0xd9, 0xa9,
	0xd3, 0x70, 0x99, 0xd5, 0xfc, 0x27, 0xf0, 0x7a, 0xd1, 0x18, 0x43, 0xdf, 0x25, 0x52, 0xa2, 0x7e,
	0x87, 0x3b, 0x5c, 0x49, 0x03, 0x8d, 0xc1, 0xd6, 0xba, 0x1c, 0x60, 0x9a, 0xc6, 0xd4, 0xc5, 0x6f,
	0xdc, 0xcc, 0xa9, 0x8a, 0x95, 0x82, 0x81, 0xe5, 0x6f, 0x1e, 0xcf, 0xae, 0x54, 0xe9, 0xe4, 0xec,
	0x2d, 0x71, 0x70, 0xfb, 0x10, 0x08, 0xdd, 0xf9, 0x4b, 0x8a, 0x1e, 0xd8, 0x3e, 0x53, 0x14, 0x7f,
	0xe7, 0xe1, 0x49, 0x74, 0x7e, 0x41, 0x11, 0x04, 0xbd, 0xb4, 0x22, 0x71, 0xc6, 0x34, 0x9c, 0xc1,
	0xdd, 0xb5, 0x17, 0xcc, 0x42, 0x95, 0xd0, 0x25, 0x0e, 0x1e, 0x5e, 0x4c, 0x75, 0xa0, 0x90, 0x82,
	0x04, 0xa7, 0x76, 0x85, 0x97, 0x77, 0xea, 0x90, 0x49, 0xdb, 0xa5, 0x4e, 0x9d, 0xeb, 0x9f, 0x8e,
	0x7b, 0x51, 0x8d, 0x7b, 0x18, 0x49, 0x23, 0x68, 0x21, 0x5d, 0x0e, 0x32, 0xd0, 0x51, 0x24, 0xc6,
	0xf5, 0x2c, 0x3e, 0xa7, 0x08, 0xab, 0x49, 0xfc, 0x24, 0x0e, 0x24, 0xc4, 0x9e, 0xe2, 0x04, 0x59,
	0xf3, 0x5f, 0x6a, 0x62, 0x83, 0xca, 0x64, 0xf9, 0x96, 0xc0, 0x1e, 0xcf, 0x6f, 0x09, 0x95, 0xbe,
	0x7f, 0xed, 0x7a, 0xdf, 0x0f, 0xfb, 0x56, 0x8d, 0x30, 0x06, 0x2e, 0x03, 0x5d, 0xe2, 0xe0, 0x38,
	0x24, 0x04, 0xdc, 0x83, 0xe9, 0x4a, 0xc1, 0xf9, 0x59, 0xe2, 0x60, 0x4e, 0x25, 0x41, 0xfc, 0x4c,
	0xe1, 0x4c, 0xdf, 0xcd, 0x7f, 0xad, 0x09, 0xe3, 0x7a, 0x73, 0x68, 0x7e, 0x24, 0x0e, 0xb0, 0x3d,
	0xec, 0x40, 0x63, 0x02, 0x07, 0x69, 0x02, 0xb9, 0x01, 0x86, 0x62, 0x84, 0x5d, 0x67, 0x9b, 0x87,
	0xc2, 0x40, 0xd6, 0x10, 0xef, 0xce, 0x30, 0xc7, 0x49, 0x96, 0x2d, 0x54, 0xac, 0xde, 0xe0, 0x9b,
	0x3f, 0x14, 0x77, 0xd2, 0x8b, 0xf9, 0x72, 0x36, 0xb5, 0x5f, 0xcc, 0xa3, 0x29, 0x2f, 0x45, 0x91,
	0xdb, 0x90, 0x37, 0x07, 0x9a, 0xff, 0x56, 0x17, 0x3b, 0xa5, 0xce, 0x8f, 0x02, 0x10, 0xaa, 0x60,
	0x29, 0x4f, 0x72, 0x9a, 0x9a, 0xa7, 0x70, 0xf2, 0x82, 0xc6, 0x70, 0x75, 0x6c, 0x9e, 0x14, 0xad,
	0xf5, 0x08, 0x12, 0xd5, 0x03, 0x68, 0x9a, 0xf5, 0x82, 0x69, 0x09, 0xae, 0x9c, 0xa6, 0x62, 0xa3,
	0xb2, 0x6b, 0x43, 0x15, 0x1b, 0x26, 0xcd, 0x9f, 0x15, 0x6f, 0x21, 0x9b, 0xf4, 0x4e, 0xb1, 0xaa,
	0xdf, 0x69, 0x07, 0x59, 0x50, 0x7d, 0x0c, 0xa1, 0x26, 0x02, 0x9b, 0xd8, 0x70, 0xaa, 0x0f, 0x22,
	0x4d, 0xd3, 0xdd, 0x03, 0x20, 0x23, 0xd7, 0x73, 0x2d, 0xcc, 0x69, 0x84, 0x39, 0xbb, 0x58, 0x5e,
	0x9e, 0x96, 0x3d, 0xc2, 0x85, 0xeb, 0x06, 0x1f, 0x63, 0x88, 0x78, 0x34, 0xd1, 0x3e, 0xc7, 0x50,
	0xce, 0xc0, 0x6d, 0xe1, 0xac, 0xdd, 0x30, 0x56, 0x95, 0x49, 0x93, 0x58, 0x11, 0xf1, 0x1e, 0x34,
	0xb5, 0x0c, 0xae, 0x88, 0x44, 0x70, 0x73, 0x32, 0x79, 0x01, 0xc0, 0xde, 0xe1, 0xec, 0x64, 0xaa,
	0xb9, 0x14, 0x07, 0xdc, 0xce, 0x85, 0x97, 0xa7, 0x80, 0x33, 0x96, 0x98, 0x72, 0x1d, 0xab, 0x55,
	0xeb, 0x58, 0xde, 0x84, 0xac, 0x5d, 0x6b, 0x42, 0xb0, 0x43, 0x83, 0xbf, 0x13, 0x2c, 0xdc, 0xba,
	0x43, 0x53, 0x34, 0x85, 0x2b, 0x74, 0x48, 0xe4, 0x19, 0x0c, 0x57, 0xf8, 0x6e, 0xfe, 0x6f, 0x5d,
	0x6c, 0xe7, 0xf7, 0xc2, 0x6a, 0x22, 0xd5, 0x5e, 0x3f, 0x91, 0x40, 0x6f, 0xfe, 0x32, 0x26, 0x53,
	0xeb, 0xac, 0xa7, 0x48, 0xd4, 0xa3, 0x4f, 0xd2, 0xe3, 0x90, 0x28, 0x18, 0xd7, 0x12, 0x6c, 0xe3,
	0x46, 0x82, 0x55, 0x13, 0x74, 0xf3, 0x46, 0x82, 0xea, 0x9e, 0x73, 0x6b, 0x45, 0xcf, 0xd9, 0xb8,
	0xd6, 0x73, 0x02, 0xa2, 0x97, 0xa7, 0x78, 0xee, 0xeb, 0xce, 0x90, 0x29, 0x7a, 0x38, 0x38, 0x6d,
	0xd1, 0x33, 0x97, 0x60, 0xfb, 0x15, 0x89, 0x4e, 0x0c, 0xa6, 0x97, 0x70, 0x51, 0xe0, 0x53, 0x90,
	0x89, 0x0a, 0xca, 0xbb, 0xd7, 0x50, 0x56, 0xde, 0xc1, 0x5e, 0x94, 0x42, 0x6a, 0x43, 0xe6, 0x34,
	0x1c, 0x1a, 0x9b, 0x97, 0x57, 0xa5, 0x07, 0x98, 0x0f, 0x6f, 0x6d, 0xec, 0xf3, 0x48, 0x90, 0x4a,
	0x0b, 0xae, 0xcc, 0xe2, 0x92, 0xb8, 0xb4, 0x07, 0x7e, 0x7d, 0x79, 0xdd, 0x39, 0x4a, 0x9a, 0xcd,
	0xdf, 0xd4, 0xc4, 0x5e, 0xe5, 0x3a, 0x7f, 0x8b, 0xe7, 0xc1, 0x07, 0xfa, 0xaa, 0x4f, 0xd5, 0x80,
	0xba, 0xed, 0x82, 0x43, 0xcf, 0x7e, 0x51, 0x36, 0xd3, 0xc5, 0x80, 0x09, 0x7a, 0xd0, 0xa1, 0x6a,
	0xa2, 0x9c, 0xae, 0xa8, 0x4a, 0xf5, 0xd8, 0xb8, 0x56, 0x3d, 0x4a, 0x15, 0x62, 0xb3, 0x52, 0x21,
	0x9a, 0xbf, 0x85, 0x16, 0x38, 0x7f, 0xfd, 0x5a, 0x6d, 0xaa, 0xca, 0xb8, 0xb6, 0x36, 0x85, 0x88,
	0xf2, 0xab, 0xd0, 0x46, 0xf5, 0x55, 0x08, 0x6e, 0x7b, 0x53, 0x55, 0x52, 0x28, 0x84, 0x5e, 0xa3,
	0xf2, 0xe4, 0x0a, 0x18, 0x7b, 0xc3, 0xf0, 0x95, 0x8e, 0xa4, 0xf5, 0x0c, 0xbe, 0xf9, 0x20, 0xc5,
	0x7d, 0x96, 0x2e, 0x08, 0x25, 0x4e, 0xde, 0xbd, 0x73, 0xcc, 0x70, 0xf7, 0x0e, 0x19, 0x02, 0x55,
	0x7a, 0xc2, 0x29, 0xc0, 0x01, 0x53, 0x30, 0xe8, 0x69, 0x0a, 0xea, 0x49, 0x29, 0x66, 0x56, 0x3e,
	0x4d, 0x29, 0x31, 0x99, 0x2b, 0x34, 0xff, 0xa7, 0xa6, 0x8a, 0x4a, 0xe9, 0x66, 0xb8, 0x1a, 0x3d,
	0xe5, 0xb2, 0xdc, 0xc9, 0x8a, 0x2a, 0xe3, 0x57, 0x5f, 0x8d, 0xdf, 0xfa, 0xef, 0x8a, 0xdf, 0xea,
	0xf3, 0x40, 0xc5, 0x08, 0x61, 0xb8, 0x59, 0xc4, 0x88, 0xae, 0x6f, 0x79, 0x51, 0xdf, 0xaa, 0x16,
	0xf5, 0xe6, 0x7f, 0xd6, 0x44, 0x43, 0x3f, 0xd0, 0x99, 0x9f, 0xe2, 0x8b, 0x22, 0x3e, 0x6b, 0xd3,
	0x36, 0xf7, 0x57, 0x3e, 0x8a, 0xe1, 0xbb, 0x12, 0xc9, 0x49, 0x25, 0x7f, 0x6b, 0x79, 0xcd, 0x23,
	0x6c, 0x7d, 0x45, 0x84, 0x6d, 0x56, 0x11, 0x2a, 0xa1, 0xdd, 0xb8, 0x81, 0x36, 0xd4, 0x39, 0x38,
	0x8d, 0x8b, 0x4b, 0x2a, 0x52, 0xcd, 0x0c, 0xf6, 0xa0, 0xfc, 0x97, 0xbf, 0x71, 0xd6, 0x4a, 0x6f,
	0x9c, 0x18, 0x42, 0x85, 0x65, 0xf4, 0x8d, 0xbd, 0x11, 0x46, 0x22, 0x7b, 0x07, 0x3f, 0x51, 0x2a,
	0x8d, 0x7e, 0x9d, 0x97, 0x7a, 0xfc, 0xd6, 0xd0, 0x1d, 0x5d, 0x65, 0xa1, 0x2a, 0x98, 0x39, 0xdd,
	0xfc, 0xef, 0x9a, 0xd8, 0x29, 0xbd, 0xb0, 0x99, 0x9f, 0x89, 0xed, 0x10, 0xaf, 0x08, 0x47, 0x51,
	0x3c, 0xa5, 0xe5, 0x57, 0xc7, 0x1d, 0xa8, 0x39, 0x28, 0x2a, 0x0b, 0x0d, 0x7c, 0x92, 0xa3, 0xb7,
	0xde, 0x68, 0x1e, 0xfb, 0x61, 0x46, 0xb6, 0xde, 0xfa, 0xb2, 0xf7, 0x48, 0x09, 0xcb, 0xb2, 0x1a,
	0x1a, 0x41, 0x37, 0x27, 0x32, 0xa2, 0xfe, 0x4d, 0x46, 0x0c, 0x50, 0x54, 0x16, 0x1a, 0xfa, 0x17,
	0x8a, 0xf5, 0xfc, 0x17, 0x8a, 0xe6, 0x3f, 0x43, 0x80, 0x68, 0x73, 0xe9, 0x8d, 0x01, 0xdf, 0x5e,
	0xe8, 0x56, 0x54, 0x53, 0x6f, 0x0c, 0x9a, 0x61, 0x76, 0xc5, 0x41, 0x4e, 0x70, 0x7c, 0xd0, 0x2e,
	0xf6, 0x57, 0xee, 0x42, 0x4b, 0x2e, 0xb3, 0x54, 0x5e, 0x57, 0xe5, 0xfb, 0x4b, 0xb5, 0x67, 0xd2,
	0x74, 0xf3, 0xdf, 0x19, 0x7a, 0x0d, 0x01, 0xde, 0x44, 0x16, 0xe9, 0x4b, 0x20, 0x91, 0xfa, 0xb1,
	0xb2, 0xac, 0xcc, 0xaa, 0x4a, 0x7c, 0xac, 0x22, 0xa1, 0xcc, 0xaa, 0x4a, 0xfc, 0xa1, 0x5a, 0xb2,
	0xcc, 0xc2, 0xdd, 0x03, 0x69, 0xc7, 0xe9, 0xcb, 0xbc, 0x44, 0x17, 0x0c, 0x6c, 0x8f, 0x0a, 0x61,
	0x6f, 0x89, 0xe7, 0x86, 0x6a, 0x72, 0x6f, 0xf0, 0x35, 0xa8, 0x03, 0xfd, 0xe8, 0x40, 0x6f, 0x45,
	0x74, 0xfb, 0x2d, 0x81, 0xca, 0xa3, 0x0a, 0x54, 0x22, 0xfe, 0x7f, 0xa0, 0x96, 0x54, 0x6f, 0x05,
	0xf5, 0x3f, 0x6a, 0x62, 0x93, 0x9f, 0x07, 0xe9, 0x3a, 0xf4, 0x02, 0x8a, 0x4e, 0x42, 0xf6, 0xec,
	0x4a, 0x45, 0x7d, 0x6d, 0x22, 0xe9, 0xfa, 0x5c, 0x2f, 0xd5, 0x67, 0x75, 0xc5, 0x5e, 0x2f, 0xae,
	0xd8, 0xa5, 0x17, 0x12, 0x75, 0x0d, 0xcf, 0x2f, 0xbf, 0x9b, 0xe5, 0xcb, 0x2f, 0x5e, 0xa2, 0xa1,
	0xf0, 0x06, 0xf8, 0xb4, 0xbe, 0x45, 0xf7, 0x96, 0x9c, 0xa6, 0x37, 0xac, 0xc5, 0x54, 0x77, 0x3e,
	0x5c, 0x02, 0x4a, 0x9c, 0x66, 0x5b, 0x34, 0xf4, 0x0b, 0x2f, 0xbd, 0x45, 0xc0, 0x57, 0xb6, 0x9c,
	0x32, 0xa6, 0x30, 0x8f, 0xa6, 0x11, 0xf0, 0xd9, 0x3c, 0x3e, 0xe7, 0xc1, 0x35, 0x1a, 0x2c, 0x18,
	0xcd, 0x9f, 0x0a, 0x6b, 0xd5, 0x63, 0x6f, 0xa5, 0x57, 0xc7, 0xfe, 0xbf, 0xd4, 0xab, 0x63, 0x25,
	0x3d, 0xb8, 0xf6, 0xa6, 0x0b, 0xb7, 0x0d, 0xda, 0x35, 0x57, 0xd3, 0xb7, 0x56, 0xfe, 0x72, 0xf4,
	0x8a, 0x11, 0xf9, 0x04, 0x50, 0x9f, 0x64, 0xd1, 0x0b, 0x7d, 0x30, 0xac, 0x7a, 0xff, 0xb6, 0x49,
	0x48, 0x2a, 0x61, 0xee, 0xe7, 0xed, 0xd9, 0xcc, 0x3e, 0x0f, 0x8b, 0x7e, 0x9e, 0x69, 0x6a, 0xde,
	0xa2, 0x18, 0x47, 0xb8, 0x47, 0x53, 0x14, 0xf1, 0x83, 0x57, 0xc8, 0xdf, 0x53, 0x7c, 0xa2, 0x9a,
	0xcf, 0xc5, 0x5e, 0xe5, 0x85, 0x18, 0xb3, 0x22, 0x4a, 0x5b, 0x41, 0x7c, 0x84, 0x37, 0xae, 0xa9,
	0x7a, 0x42, 0x2b, 0xb3, 0x10, 0xcd, 0x28, 0xf5, 0xe0, 0x08, 0x19, 0x46, 0x0b, 0xf5, 0x9a, 0x56,
	0x30, 0x50, 0x3f, 0x8b, 0x16, 0x6d, 0xed, 0xd2, 0x3a, 0xa1, 0x5d, 0x66, 0x1d, 0xfe, 0x76, 0x5f,
	0x6c, 0xa9, 0xcb, 0xbe, 0xb9, 0x2d, 0x36, 0xba, 0xfd, 0x63, 0xd7, 0x33, 0xbe, 0x65, 0xee, 0x89,
	0xed, 0x23, 0xdb, 0x1b, 0x33, 0x59, 0x33, 0x77, 0x45, 0x43, 0x3a, 0xc7, 0xae, 0x3f, 0x74, 0xa4,
	0xb1, 0x66, 0x7e, 0x1b, 0xce, 0x68, 0x67, 0x38, 0xee, 0x77, 0x3a, 0x5d, 0xd7, 0x73, 0xc6, 0x3d,
	0xff, 0xd8, 0xa8, 0xa3, 0x08, 0x32, 0xed, 0xe1, 0x50, 0x1a, 0xeb, 0x10, 0x96, 0xfb, 0x6d, 0xa0,
	0x5a, 0x23, 0x7f, 0xd8, 0xef, 0x11, 0x6f, 0x03, 0xe7, 0xf4, 0xed, 0xc7, 0x0e, 0x8b, 0x6c, 0xea,
	0x59, 0x06, 0x4f, 0xda, 0xe3, 0x47, 0x23, 0x67, 0xe8, 0xf6, 0x3d, 0x63, 0x0b, 0x99, 0xad, 0x13,
	0xdb, 0x3b, 0x76, 0xc6, 0x03, 0xdb, 0xf7, 0x9f, 0xf4, 0x65, 0xdb, 0x68, 0x40, 0xac, 0x1a, 0xbe,
	0xd3, 0x75, 0x5a, 0xc3, 0xf1, 0xc8, 0x77, 0xe4, 0x58, 0xf6, 0xbb, 0x8e, 0xb1, 0x6d, 0x1e, 0x40,
	0x11, 0xea, 0xb7, 0xdd, 0xce, 0x53, 0x66, 0x08, 0xd4, 0xf5, 0xaf, 0x4d, 0xb8, 0x03, 0x50, 0x9b,
	0x8f, 0x1d, 0x89, 0x52, 0x65, 0xfe, 0xae, 0xf9, 0xbe, 0x78, 0xfb, 0xda, 0x42, 0xe3, 0xa3, 0xa7,
	0x7a, 0xdc, 0x37, 0xf6, 0x70, 0xd1, 0xc7, 0xae, 0xf3, 0x64, 0x7c, 0x02, 0xbb, 0xee, 0x0f, 0x9f,
	0xd2, 0x2e, 0xef, 0x9a, 0xfb, 0x42, 0xa0, 0xd1, 0x1d, 0xe9, 0x3a, 0x5e, 0xdb, 0x78, 0x03, 0xe9,
	0x76, 0x41, 0x5b, 0xe6, 0x1d, 0xb1, 0x27, 0xe9, 0xe9, 0x76, 0xcc, 0x2f, 0x76, 0xc6, 0x9b, 0x38,
	0x91, 0xdd, 0x6e, 0x2b, 0x7a, 0x7c, 0x2c, 0xfb, 0xa3, 0x81, 0xf1, 0x16, 0x72, 0x49, 0xb1, 0xcc,
	0x7d, 0xdb, 0xfc, 0xae, 0xf8, 0x76, 0x45, 0x5d, 0x0d, 0xbc, 0x63, 0xde, 0x15, 0x77, 0x68, 0x12,
	0x5a, 0x67, 0x2c, 0xe9, 0xcc, 0x31, 0xde, 0x45, 0xf9, 0x32, 0x5b, 0xfd, 0x10, 0x6e, 0xbc, 0x87,
	0x76, 0xf9, 0x8e, 0xf3, 0x70, 0x6c, 0x83, 0x7e, 0xdb, 0xb8, 0x8f, 0xfe, 0x20, 0xba, 0xd5, 0xf7,
	0xda, 0x2e, 0x41, 0xf0, 0x41, 0x21, 0x03, 0xfe, 0x38, 0x32, 0x3e, 0x24, 0xff, 0x20, 0xed, 0xd9,
	0x3d, 0xc7, 0xf8, 0x7e, 0x3e, 0xcc, 0x26, 0xfc, 0x80, 0xb6, 0x8e, 0x9f, 0x63, 0xc0, 0x6d, 0x68,
	0x7c, 0x62, 0xbe, 0x2b, 0xde, 0x84, 0x71, 0x1e, 0x46, 0x74, 0xc6, 0xd2, 0xb1, 0xdb, 0x63, 0x7f,
	0x68, 0x0f, 0x47, 0xbe, 0xf1, 0x53, 0x5c, 0x11, 0x91, 0xe2, 0xe1, 0x8e, 0x0b, 0x1e, 0xfa, 0x23,
	0x44, 0x07, 0x05, 0x3b, 0x8e, 0x03, 0x68, 0xdb, 0xad, 0x87, 0xc6, 0xa7, 0xd0, 0x6e, 0x7c, 0x87,
	0xc2, 0xa6, 0xdb, 0x55, 0xa2, 0x5f, 0xf4, 0x21, 0xa6, 0xda, 0xc6, 0xcf, 0xcc, 0x37, 0xc5, 0xdd,
	0x62, 0x82, 0xc1, 0xe8, 0xa8, 0xeb, 0xb6, 0xc6, 0xae, 0xd7, 0xe9, 0x1b, 0x7f, 0x6c, 0xbe, 0x2d,
	0xbe, 0x5b, 0x1a, 0x72, 0xa4, 0xdf, 0xf7, 0xec, 0x2e, 0x0f, 0xfe, 0x1c, 0x17, 0x29, 0x06, 0xd1,
	0x6b, 0x1d, 0x28, 0x7f, 0xbb, 0x2d, 0xb0, 0x6e, 0xa8, 0xac, 0x35, 0xfe, 0x04, 0x39, 0xbe, 0x63,
	0xcb, 0xd6, 0x89, 0xe2, 0x7c, 0x86, 0xdb, 0xc3, 0xa5, 0x15, 0xfd, 0x0b, 0x44, 0xa3, 0xed, 0x28,
	0xa3, 0x8c, 0x3f, 0xc5, 0x61, 0xe7, 0x4b, 0x57, 0x4d, 0x6b, 0x7c, 0xce, 0xfe, 0xd3, 0x36, 0xf7,
	0x9c, 0xde, 0x11, 0x64, 0x86, 0x8d, 0x51, 0xe5, 0x7a, 0x8f, 0x5d, 0x58, 0x88, 0x59, 0xe3, 0x61,
	0x7f, 0x5c, 0x9a, 0xf5, 0x15, 0xc6, 0xa8, 0xd3, 0xd6, 0xd3, 0xb0, 0xc5, 0x57, 0xe8, 0xc5, 0x12,
	0x13, 0xe1, 0x6f, 0xd9, 0x10, 0xf8, 0xbf, 0xd6, 0x11, 0xcd, 0x7c, 0xbb, 0xdd, 0x83, 0x5c, 0xfc,
	0x2b, 0x8c, 0x68, 0xe9, 0xf4, 0xfa, 0x8f, 0x9d, 0x0a, 0xff, 0xaf, 0x11, 0xf0, 0xa1, 0xb4, 0x3d,
	0xbf, 0x03, 0xcb, 0xf2, 0x72, 0x7f, 0xc3, 0x2e, 0x85, 0xc8, 0x20, 0xfc, 0x8f, 0x31, 0x47, 0x6d,
	0xff, 0x21, 0x53, 0x27, 0x94, 0x6b, 0x8c, 0x8a, 0xed, 0x79, 0xfd, 0x91, 0xd7, 0x72, 0x8c, 0x2f,
	0x10, 0x3d, 0xb2, 0x25, 0x67, 0x3d, 0x44, 0xac, 0xc8, 0x45, 0x9a, 0xd3, 0x45, 0x0e, 0x6e, 0x3e,
	0xe7, 0xf4, 0xd0, 0x8d, 0xae, 0x3f, 0x3e, 0xc1, 0xf4, 0xf6, 0x20, 0x69, 0xf2, 0x11, 0x0f, 0x81,
	0x3b, 0x72, 0xc1, 0x04, 0xa7, 0x67, 0xbb, 0x5d, 0x63, 0x80, 0xba, 0xca, 0x7c, 0xe6, 0x3c, 0x62,
	0x5f, 0x0c, 0x31, 0xf7, 0x7c, 0x8a, 0x4c, 0x49, 0x96, 0xd9, 0xa0, 0xde, 0x2d, 0x98, 0x3e, 0xa6,
	0x00, 0x9a, 0xe1, 0x3b, 0xad, 0x91, 0x74, 0x21, 0x21, 0x09, 0xbc, 0x61, 0x3e, 0xff, 0xe0, 0xa4,
	0xef, 0x39, 0xc6, 0x88, 0x7c, 0xcd, 0xba, 0xcc, 0x79, 0x0c, 0x25, 0xd2, 0xd2, 0xa9, 0xfe, 0x84,
	0xb2, 0xbc, 0x2f, 0x5d, 0x28, 0x6b, 0x48, 0x19, 0x4f, 0x10, 0xfc, 0xea, 0x28, 0x9b, 0xf5, 0x25,
	0xe2, 0x4c, 0xe5, 0x4f, 0xf3, 0x79, 0xba, 0xa7, 0x68, 0x9c, 0x2a, 0x98, 0x60, 0x8b, 0xef, 0xa3,
	0x71, 0xbf, 0xc4, 0x59, 0x34, 0x73, 0x34, 0xe8, 0xf6, 0x6d, 0x05, 0xf9, 0xaf, 0x50, 0x7a, 0x34,
	0x68, 0x23, 0xc8, 0xdd, 0x7e, 0xcb, 0xa6, 0xad, 0x4c, 0x74, 0x15, 0xf1, 0x20, 0x02, 0x8f, 0x9e,
	0x1a, 0xf8, 0xc2, 0x62, 0x16, 0x34, 0xad, 0x65, 0x1f, 0x3b, 0x46, 0xa8, 0x73, 0x48, 0xf1, 0x87,
	0xee, 0xc0, 0x38, 0xd3, 0x3c, 0x95, 0xf2, 0x18, 0xdf, 0x17, 0xd7, 0xf4, 0x01, 0xcc, 0xa1, 0xeb,
	0x1d, 0x1b, 0xe7, 0x98, 0x42, 0x6a, 0xf1, 0x6b, 0x43, 0x5f, 0x99, 0xdf, 0x13, 0xef, 0x53, 0xf5,
	0xd5, 0xc9, 0xa3, 0x13, 0x18, 0x46, 0xe1, 0x6f, 0x0b, 0x0b, 0x6f, 0x84, 0xe1, 0x7c, 0x4c, 0x55,
	0x5c, 0x4a, 0xc7, 0x23, 0xe1, 0x9e, 0x4b, 0x3b, 0x1e, 0x0f, 0x9f, 0x0e, 0x1c, 0x23, 0xe6, 0x72,
	0xed, 0xb4, 0x1e, 0x8e, 0xe5, 0xb1, 0x3f, 0x64, 0xe6, 0x1c, 0x43, 0x08, 0xfd, 0x59, 0xb0, 0x16,
	0x68, 0x34, 0xcb, 0xb9, 0x1d, 0x75, 0xa6, 0x3c, 0xe7, 0x92, 0x34, 0x64, 0x92, 0xe5, 0x12, 0x76,
	0x06, 0xca, 0x71, 0xa1, 0x77, 0x1e, 0x8d, 0x5c, 0x09, 0xc5, 0x20, 0x45, 0xe7, 0xa3, 0x70, 0x95,
	0x9d, 0xb1, 0x6b, 0x51, 0xbe, 0x9c, 0xde, 0xe3, 0xae, 0xdb, 0x73, 0x87, 0xc6, 0x12, 0x8e, 0xe6,
	0x37, 0x50, 0xe9, 0x6b, 0xc6, 0x5e, 0xe8, 0x2a, 0x81, 0xb5, 0x8f, 0x17, 0x7f, 0xa9, 0x0f, 0x24,
	0x5a, 0x03, 0x6a, 0x33, 0x46, 0xc1, 0xdf, 0xe2, 0xc2, 0xea, 0x94, 0x21, 0x3e, 0x06, 0x9d, 0x34,
	0xfe, 0xee, 0xf0, 0x03, 0x28, 0x8e, 0xf9, 0xbf, 0x20, 0x99, 0x3b, 0x62, 0xcb, 0x1f, 0xb5, 0x5a,
	0x10, 0x0d, 0x70, 0x74, 0x0a, 0xb1, 0xd9, 0x01, 0x5d, 0xb0, 0xaf, 0x76, 0x08, 0x3d, 0xd1, 0x48,
	0xbf, 0xa4, 0x40, 0xf2, 0xf9, 0xcb, 0x85, 0x8d, 0xaf, 0x31, 0x70, 0xa2, 0xc2, 0x59, 0xcb, 0x9f,
	0x6b, 0x98, 0xa4, 0xf8, 0x53, 0xc0, 0x65, 0xe2, 0x27, 0x2f, 0xe0, 0x20, 0x85, 0x00, 0xee, 0x27,
	0xd0, 0xf5, 0x04, 0xc9, 0x15, 0xea, 0x1a, 0xeb, 0x87, 0x9f, 0x8a, 0xed, 0xfc, 0xce, 0x57, 0xa4,
	0x34, 0xda, 0xf7, 0x2d, 0x4e, 0x1e, 0x20, 0xf5, 0xfa, 0x6b, 0xb8, 0x3e, 0x3a, 0x12, 0xd6, 0x5f,
	0x3f, 0xfc, 0x07, 0xe8, 0x74, 0xf5, 0x45, 0xd6, 0x6c, 0xc0, 0xf5, 0xdf, 0xf9, 0x72, 0x08, 0x4a,
	0xb0, 0xb8, 0xdb, 0xc3, 0x10, 0x23, 0x3b, 0x1e, 0xbb, 0x6d, 0xa7, 0x0f, 0x8a, 0xf8, 0xd9, 0x77,
	0x21, 0x69, 0xeb, 0x28, 0x4a, 0xf1, 0xbb, 0x81, 0xfb, 0xcf, 0xcb, 0xf5, 0x98, 0x56, 0xea, 0x3f,
	0x84, 0xc3, 0x1b, 0x22, 0xae, 0x60, 0x43, 0xbc, 0x38, 0xee, 0x63, 0x58, 0x70, 0x0b, 0xeb, 0x40,
	0xc1, 0x87, 0x7c, 0x19, 0x2b, 0x53, 0x1a, 0x87, 0xb6, 0xd8, 0x29, 0xf5, 0xc6, 0x08, 0xd9, 0xc8,
	0x3b, 0x82, 0x22, 0xd1, 0x66, 0x7b, 0xf8, 0xb3, 0xc6, 0xd6, 0x03, 0xd4, 0x6d, 0x30, 0x08, 0xd2,
	0x64, 0xe4, 0xd1, 0xe9, 0xed, 0x02, 0x5d, 0x3f, 0xbc, 0x2f, 0xf6, 0xf5, 0x9d, 0x43, 0x81, 0x01,
	0x8a, 0x23, 0x0f, 0x7c, 0x0c, 0x73, 0x6c, 0x89, 0x3a, 0x7e, 0xd4, 0x0e, 0x9b, 0xf0, 0x01, 0xed,
	0x1c, 0xd0, 0x70, 0xa8, 0xf0, 0x40, 0xcf, 0xf6, 0x78, 0xab, 0x4f, 0xfa, 0xf8, 0xb9, 0x76, 0xd8,
	0x13, 0x9b, 0xdc, 0xc6, 0xa1, 0x1d, 0x68, 0x66, 0xdb, 0x7e, 0x0a, 0xa2, 0xb0, 0xe0, 0xf0, 0x44,
	0x3a, 0x44, 0xfa, 0xa0, 0x01, 0x11, 0xd1, 0x71, 0x3b, 0x43, 0xc7, 0xf1, 0xc6, 0x50, 0x63, 0x47,
	0x43, 0x07, 0xf1, 0xc5, 0xf0, 0x76, 0xbf, 0xc4, 0x8e, 0x40, 0xb1, 0xea, 0x47, 0xbb, 0x47, 0x62,
	0x80, 0xed, 0x61, 0x6b, 0x16, 0xa4, 0xe9, 0xff, 0x05, 0x00, 0x00, 0xff, 0xff, 0x70, 0x99, 0x00,
	0xe6, 0x57, 0x27, 0x00, 0x00,
}
